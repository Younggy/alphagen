[79155:MainThread](2024-01-05 08:48:39,854) INFO - qlib.Initialization - [config.py:416] - default_conf: client.
[79155:MainThread](2024-01-05 08:48:40,204) INFO - qlib.Initialization - [__init__.py:74] - qlib successfully initialized based on client settings.
[79155:MainThread](2024-01-05 08:48:40,204) INFO - qlib.Initialization - [__init__.py:76] - data_path={'__DEFAULT_FREQ': PosixPath('/Users/yangguangyu/.qlib/qlib_data/cn_data_rolling')}
instruments: hs300
raw df:                             $open      $close  ...       $volume       $vwap
datetime   instrument                          ...                          
2014-08-06 SH600000     36.678059   36.342247  ...  3.605535e+07   36.323227
           SH600009     15.457175   15.367242  ...  8.106222e+06   15.345646
           SH600010      4.297257    4.641038  ...  2.718216e+08    4.527487
           SH600011      7.163883    7.211963  ...  1.499561e+07    7.187034
           SH600015     12.955123   13.058764  ...  2.845987e+07   12.957579
...                           ...         ...  ...           ...         ...
2019-02-19 SZ300661    107.945366  107.527779  ...  4.550401e+05  107.080376
           SZ300750     84.660004   82.290001  ...  9.425786e+06   82.973038
           SZ300751    174.140717  175.225296  ...  1.107769e+06  177.069061
           SZ300759     31.355343   31.355343  ...  6.096700e+05   31.355343
           SZ300760    114.797508  115.075615  ...  4.319464e+06  116.721550

[251929 rows x 6 columns]
preprocessed df:                             $open      $close  ...       $volume       $vwap
datetime   instrument                          ...                          
2014-08-06 SH600000     36.678059   36.342247  ...  3.605535e+07   36.323227
           SH600009     15.457175   15.367242  ...  8.106222e+06   15.345646
           SH600010      4.297257    4.641038  ...  2.718216e+08    4.527487
           SH600011      7.163883    7.211963  ...  1.499561e+07    7.187034
           SH600015     12.955123   13.058764  ...  2.845987e+07   12.957579
...                           ...         ...  ...           ...         ...
2019-02-19 SZ300661    107.945366  107.527779  ...  4.550401e+05  107.080376
           SZ300750     84.660004   82.290001  ...  9.425786e+06   82.973038
           SZ300751    174.140717  175.225296  ...  1.107769e+06  177.069061
           SZ300759     31.355343   31.355343  ...  6.096700e+05   31.355343
           SZ300760    114.797508  115.075615  ...  4.319464e+06  116.721550

[251929 rows x 6 columns]
df after stack: instrument              SH600000      SH600009  ...       SZ300759      SZ300760
datetime                                        ...                             
2014-08-06 $open    3.667806e+01  1.545718e+01  ...            NaN           NaN
           $close   3.634225e+01  1.536724e+01  ...            NaN           NaN
           $high    3.667806e+01  1.545718e+01  ...            NaN           NaN
           $low     3.604375e+01  1.523234e+01  ...            NaN           NaN
           $volume  3.605535e+07  8.106222e+06  ...            NaN           NaN
...                          ...           ...  ...            ...           ...
2019-02-19 $close   6.353659e+01  6.572910e+01  ...      31.355343  1.150756e+02
           $high    6.447787e+01  6.724870e+01  ...      31.355343  1.194855e+02
           $low     6.341893e+01  6.418536e+01  ...      31.355343  1.146982e+02
           $volume  4.411468e+06  7.203972e+06  ...  609670.000000  4.319464e+06
           $vwap    6.380305e+01  6.596772e+01  ...      31.355343  1.167215e+02

[6630 rows x 254 columns]
features: ['$open', '$close', '$high', '$low', '$volume', '$vwap']
dates: DatetimeIndex(['2014-08-06', '2014-08-07', '2014-08-08', '2014-08-11',
               '2014-08-12', '2014-08-13', '2014-08-14', '2014-08-15',
               '2014-08-18', '2014-08-19',
               ...
               '2019-01-30', '2019-01-31', '2019-02-01', '2019-02-11',
               '2019-02-12', '2019-02-13', '2019-02-14', '2019-02-15',
               '2019-02-18', '2019-02-19'],
              dtype='datetime64[ns]', name='datetime', length=1105, freq=None)
stock ids: Index(['SH600000', 'SH600009', 'SH600010', 'SH600011', 'SH600015', 'SH600016',
       'SH600018', 'SH600019', 'SH600023', 'SH600025',
       ...
       'SZ300450', 'SZ300454', 'SZ300496', 'SZ300498', 'SZ300628', 'SZ300661',
       'SZ300750', 'SZ300751', 'SZ300759', 'SZ300760'],
      dtype='object', name='instrument', length=254)
values: [[[3.66780586e+01 1.54571753e+01 4.29725742e+00 ...            nan
              nan            nan]
  [3.63422470e+01 1.53672419e+01 4.64103794e+00 ...            nan
              nan            nan]
  [3.66780586e+01 1.54571753e+01 4.75226116e+00 ...            nan
              nan            nan]
  [3.60437469e+01 1.52323427e+01 4.23659039e+00 ...            nan
              nan            nan]
  [3.60553480e+07 8.10622250e+06 2.71821600e+08 ...            nan
              nan            nan]
  [3.63232269e+01 1.53456459e+01 4.52748728e+00 ...            nan
              nan            nan]]

 [[3.63795586e+01 1.53784838e+01 4.99492979e+00 ...            nan
              nan            nan]
  [3.56706238e+01 1.52323427e+01 5.10615301e+00 ...            nan
              nan            nan]
  [3.64914970e+01 1.54234505e+01 5.10615301e+00 ...            nan
              nan            nan]
  [3.56333122e+01 1.51761351e+01 4.86348438e+00 ...            nan
              nan            nan]
  [3.78545280e+07 7.98603650e+06 5.90331968e+08 ...            nan
              nan            nan]
  [3.60145264e+01 1.53051205e+01 5.05102587e+00 ...            nan
              nan            nan]]

 [[3.56706238e+01 1.52211018e+01 4.95448494e+00 ...            nan
              nan            nan]
  [3.55959969e+01 1.52773094e+01 4.93426275e+00 ...            nan
              nan            nan]
  [3.58198738e+01 1.53335171e+01 5.02526331e+00 ...            nan
              nan            nan]
  [3.54467506e+01 1.52098598e+01 4.84326172e+00 ...            nan
              nan            nan]
  [3.24243060e+07 4.30498250e+06 3.79554208e+08 ...            nan
              nan            nan]
  [3.56202278e+01 1.52888603e+01 4.92674780e+00 ...            nan
              nan            nan]]

 ...

 [[6.34189339e+01 6.41853638e+01 4.41548395e+00 ... 1.70946655e+02
   2.59117756e+01 1.14430016e+02]
  [6.27129707e+01 6.27140007e+01 4.35887527e+00 ... 1.69155594e+02
   2.59117756e+01 1.12383957e+02]
  [6.38307419e+01 6.51140137e+01 4.41548395e+00 ... 1.75135742e+02
   2.59117756e+01 1.14867035e+02]
  [6.27129707e+01 6.24245529e+01 4.35887527e+00 ... 1.69155594e+02
   2.59117756e+01 1.11937004e+02]
  [3.01865300e+06 6.45415250e+06 5.86176800e+07 ... 8.42015375e+05
   4.17545719e+05 2.59575975e+06]
  [6.32601509e+01 6.30350151e+01 4.38394499e+00 ... 1.71651810e+02
   2.59117756e+01 1.12644287e+02]]

 [[6.32424431e+01 6.35341072e+01 4.38717937e+00 ... 1.68737686e+02
   2.85039501e+01 1.12413757e+02]
  [6.37719116e+01 6.41853638e+01 4.47209263e+00 ... 1.72140701e+02
   2.85039501e+01 1.14281029e+02]
  [6.39484024e+01 6.48607483e+01 4.47209263e+00 ... 1.73901901e+02
   2.85039501e+01 1.14966354e+02]
  [6.29482918e+01 6.35341072e+01 4.35887527e+00 ... 1.67056076e+02
   2.85039501e+01 1.12413757e+02]
  [3.41699100e+06 7.42890550e+06 1.05033320e+08 ... 7.30241188e+05
   3.87979750e+05 3.52829000e+06]
  [6.36879501e+01 6.40566711e+01 4.42524385e+00 ... 1.70564102e+02
   2.85039501e+01 1.13745903e+02]]

 [[6.38307419e+01 6.44989395e+01 4.44378853e+00 ... 1.74140717e+02
   3.13553429e+01 1.14797508e+02]
  [6.35365944e+01 6.57290955e+01 4.47209263e+00 ... 1.75225296e+02
   3.13553429e+01 1.15075615e+02]
  [6.44778748e+01 6.72487030e+01 4.55700588e+00 ... 1.82747742e+02
   3.13553429e+01 1.19485550e+02]
  [6.34189339e+01 6.41853638e+01 4.41548395e+00 ... 1.72359604e+02
   3.13553429e+01 1.14698181e+02]
  [4.41146800e+06 7.20397150e+06 1.27855160e+08 ... 1.10776938e+06
   6.09670000e+05 4.31946450e+06]
  [6.38030548e+01 6.59677200e+01 4.48601103e+00 ... 1.77069061e+02
   3.13553429e+01 1.16721550e+02]]], (1105, 6, 254)
train data: tensor([[[3.6678e+01, 1.5457e+01, 4.2973e+00,  ...,        nan,
                 nan,        nan],
         [3.6342e+01, 1.5367e+01, 4.6410e+00,  ...,        nan,
                 nan,        nan],
         [3.6678e+01, 1.5457e+01, 4.7523e+00,  ...,        nan,
                 nan,        nan],
         [3.6044e+01, 1.5232e+01, 4.2366e+00,  ...,        nan,
                 nan,        nan],
         [3.6055e+07, 8.1062e+06, 2.7182e+08,  ...,        nan,
                 nan,        nan],
         [3.6323e+01, 1.5346e+01, 4.5275e+00,  ...,        nan,
                 nan,        nan]],

        [[3.6380e+01, 1.5378e+01, 4.9949e+00,  ...,        nan,
                 nan,        nan],
         [3.5671e+01, 1.5232e+01, 5.1062e+00,  ...,        nan,
                 nan,        nan],
         [3.6491e+01, 1.5423e+01, 5.1062e+00,  ...,        nan,
                 nan,        nan],
         [3.5633e+01, 1.5176e+01, 4.8635e+00,  ...,        nan,
                 nan,        nan],
         [3.7855e+07, 7.9860e+06, 5.9033e+08,  ...,        nan,
                 nan,        nan],
         [3.6015e+01, 1.5305e+01, 5.0510e+00,  ...,        nan,
                 nan,        nan]],

        [[3.5671e+01, 1.5221e+01, 4.9545e+00,  ...,        nan,
                 nan,        nan],
         [3.5596e+01, 1.5277e+01, 4.9343e+00,  ...,        nan,
                 nan,        nan],
         [3.5820e+01, 1.5334e+01, 5.0253e+00,  ...,        nan,
                 nan,        nan],
         [3.5447e+01, 1.5210e+01, 4.8433e+00,  ...,        nan,
                 nan,        nan],
         [3.2424e+07, 4.3050e+06, 3.7955e+08,  ...,        nan,
                 nan,        nan],
         [3.5620e+01, 1.5289e+01, 4.9267e+00,  ...,        nan,
                 nan,        nan]],

        ...,

        [[6.3419e+01, 6.4185e+01, 4.4155e+00,  ..., 1.7095e+02,
          2.5912e+01, 1.1443e+02],
         [6.2713e+01, 6.2714e+01, 4.3589e+00,  ..., 1.6916e+02,
          2.5912e+01, 1.1238e+02],
         [6.3831e+01, 6.5114e+01, 4.4155e+00,  ..., 1.7514e+02,
          2.5912e+01, 1.1487e+02],
         [6.2713e+01, 6.2425e+01, 4.3589e+00,  ..., 1.6916e+02,
          2.5912e+01, 1.1194e+02],
         [3.0187e+06, 6.4542e+06, 5.8618e+07,  ..., 8.4202e+05,
          4.1755e+05, 2.5958e+06],
         [6.3260e+01, 6.3035e+01, 4.3839e+00,  ..., 1.7165e+02,
          2.5912e+01, 1.1264e+02]],

        [[6.3242e+01, 6.3534e+01, 4.3872e+00,  ..., 1.6874e+02,
          2.8504e+01, 1.1241e+02],
         [6.3772e+01, 6.4185e+01, 4.4721e+00,  ..., 1.7214e+02,
          2.8504e+01, 1.1428e+02],
         [6.3948e+01, 6.4861e+01, 4.4721e+00,  ..., 1.7390e+02,
          2.8504e+01, 1.1497e+02],
         [6.2948e+01, 6.3534e+01, 4.3589e+00,  ..., 1.6706e+02,
          2.8504e+01, 1.1241e+02],
         [3.4170e+06, 7.4289e+06, 1.0503e+08,  ..., 7.3024e+05,
          3.8798e+05, 3.5283e+06],
         [6.3688e+01, 6.4057e+01, 4.4252e+00,  ..., 1.7056e+02,
          2.8504e+01, 1.1375e+02]],

        [[6.3831e+01, 6.4499e+01, 4.4438e+00,  ..., 1.7414e+02,
          3.1355e+01, 1.1480e+02],
         [6.3537e+01, 6.5729e+01, 4.4721e+00,  ..., 1.7523e+02,
          3.1355e+01, 1.1508e+02],
         [6.4478e+01, 6.7249e+01, 4.5570e+00,  ..., 1.8275e+02,
          3.1355e+01, 1.1949e+02],
         [6.3419e+01, 6.4185e+01, 4.4155e+00,  ..., 1.7236e+02,
          3.1355e+01, 1.1470e+02],
         [4.4115e+06, 7.2040e+06, 1.2786e+08,  ..., 1.1078e+06,
          6.0967e+05, 4.3195e+06],
         [6.3803e+01, 6.5968e+01, 4.4860e+00,  ..., 1.7707e+02,
          3.1355e+01, 1.1672e+02]]]), torch.Size([1105, 6, 254])
instruments: hs300
raw df:                             $open      $close  ...     $volume       $vwap
datetime   instrument                          ...                        
2018-08-03 SH600000     57.594746   57.830067  ...   2889323.0   58.154427
           SH600009     74.151337   71.261703  ...   6064585.0   72.178673
           SH600010      4.528701    4.472093  ...  61401496.0    4.536499
           SH600011     10.894892   10.532657  ...  19608424.0   10.665854
           SH600015     17.312105   17.288551  ...   4233261.0   17.361689
...                           ...         ...  ...         ...         ...
2020-02-20 SZ300751    210.300003  221.039993  ...   1437932.0  216.365356
           SZ300759     62.450001   61.599998  ...   4543989.0   61.126060
           SZ300760    234.800003  234.990005  ...   4846309.0  235.004715
           SZ300763     76.010002   81.680000  ...   5394940.0   77.036125
           SZ300782    511.200012  551.090027  ...   1673598.0  540.987549

[95573 rows x 6 columns]
preprocessed df:                             $open      $close  ...     $volume       $vwap
datetime   instrument                          ...                        
2018-08-03 SH600000     57.594746   57.830067  ...   2889323.0   58.154427
           SH600009     74.151337   71.261703  ...   6064585.0   72.178673
           SH600010      4.528701    4.472093  ...  61401496.0    4.536499
           SH600011     10.894892   10.532657  ...  19608424.0   10.665854
           SH600015     17.312105   17.288551  ...   4233261.0   17.361689
...                           ...         ...  ...         ...         ...
2020-02-20 SZ300751    210.300003  221.039993  ...   1437932.0  216.365356
           SZ300759     62.450001   61.599998  ...   4543989.0   61.126060
           SZ300760    234.800003  234.990005  ...   4846309.0  235.004715
           SZ300763     76.010002   81.680000  ...   5394940.0   77.036125
           SZ300782    511.200012  551.090027  ...   1673598.0  540.987549

[95573 rows x 6 columns]
df after stack: instrument              SH600000      SH600009  ...      SZ300763      SZ300782
datetime                                        ...                            
2018-08-03 $open    5.759475e+01  7.415134e+01  ...           NaN           NaN
           $close   5.783007e+01  7.126170e+01  ...           NaN           NaN
           $high    5.871252e+01  7.482001e+01  ...           NaN           NaN
           $low     5.741825e+01  7.104678e+01  ...           NaN           NaN
           $volume  2.889323e+06  6.064585e+06  ...           NaN           NaN
...                          ...           ...  ...           ...           ...
2020-02-20 $close   6.811988e+01  8.970219e+01  ...  8.168000e+01  5.510900e+02
           $high    6.836252e+01  9.021268e+01  ...  8.168000e+01  5.650000e+02
           $low     6.708868e+01  8.751433e+01  ...  7.351000e+01  5.112000e+02
           $volume  6.043046e+06  1.366344e+07  ...  5.394940e+06  1.673598e+06
           $vwap    6.767087e+01  8.954028e+01  ...  7.703613e+01  5.409875e+02

[2244 rows x 265 columns]
features: ['$open', '$close', '$high', '$low', '$volume', '$vwap']
dates: DatetimeIndex(['2018-08-03', '2018-08-06', '2018-08-07', '2018-08-08',
               '2018-08-09', '2018-08-10', '2018-08-13', '2018-08-14',
               '2018-08-15', '2018-08-16',
               ...
               '2020-02-07', '2020-02-10', '2020-02-11', '2020-02-12',
               '2020-02-13', '2020-02-14', '2020-02-17', '2020-02-18',
               '2020-02-19', '2020-02-20'],
              dtype='datetime64[ns]', name='datetime', length=374, freq=None)
stock ids: Index(['SH600000', 'SH600009', 'SH600010', 'SH600011', 'SH600015', 'SH600016',
       'SH600018', 'SH600019', 'SH600023', 'SH600025',
       ...
       'SZ300496', 'SZ300498', 'SZ300628', 'SZ300661', 'SZ300750', 'SZ300751',
       'SZ300759', 'SZ300760', 'SZ300763', 'SZ300782'],
      dtype='object', name='instrument', length=265)
values: [[[5.7594746e+01 7.4151337e+01 4.5287013e+00 ...           nan
             nan           nan]
  [5.7830067e+01 7.1261703e+01 4.4720926e+00 ...           nan
             nan           nan]
  [5.8712517e+01 7.4820015e+01 4.6136146e+00 ...           nan
             nan           nan]
  [5.7418255e+01 7.1046776e+01 4.4437885e+00 ...           nan
             nan           nan]
  [2.8893230e+06 6.0645850e+06 6.1401496e+07 ...           nan
             nan           nan]
  [5.8154427e+01 7.2178673e+01 4.5364985e+00 ...           nan
             nan           nan]]

 [[5.8653687e+01 6.9375084e+01 4.4437885e+00 ...           nan
             nan           nan]
  [5.8300705e+01 6.5613785e+01 4.4720926e+00 ...           nan
             nan           nan]
  [5.9006668e+01 6.9912415e+01 4.5287013e+00 ...           nan
             nan           nan]
  [5.8065388e+01 6.4383904e+01 4.4154840e+00 ...           nan
             nan           nan]
  [2.9652285e+06 1.3297189e+07 5.4786024e+07 ...           nan
             nan           nan]
  [5.8531498e+01 6.7069809e+01 4.4683795e+00 ...           nan
             nan           nan]]

 [[5.8477196e+01 6.4288376e+01 4.5003972e+00 ...           nan
             nan           nan]
  [5.9477310e+01 6.6879494e+01 4.6136146e+00 ...           nan
             nan           nan]
  [5.9536140e+01 6.7010841e+01 4.6419191e+00 ...           nan
             nan           nan]
  [5.8477196e+01 6.4001801e+01 4.4720926e+00 ...           nan
             nan           nan]
  [3.7029738e+06 8.7752330e+06 6.3758960e+07 ...           nan
             nan           nan]
  [5.9121784e+01 6.5841408e+01 4.5497661e+00 ...           nan
             nan           nan]]

 ...

 [[6.7270660e+01 8.6785042e+01 3.4747181e+00 ... 2.3806000e+02
   6.7629997e+01 4.7879999e+02]
  [6.7088684e+01 8.6274544e+01 3.4747181e+00 ... 2.4228999e+02
   7.0190002e+01 5.2500000e+02]
  [6.7816589e+01 8.7660187e+01 3.5031993e+00 ... 2.4489999e+02
   7.0190002e+01 5.2578998e+02]
  [6.6967361e+01 8.5873436e+01 3.4462368e+00 ... 2.3799001e+02
   6.7629997e+01 4.7600000e+02]
  [4.9725155e+06 1.0627323e+07 8.7997576e+07 ... 3.8526440e+06
   1.8479300e+06 1.8417320e+06]
  [6.7264595e+01 8.6647415e+01 3.4752438e+00 ... 2.4204358e+02
   6.9770706e+01 5.0291565e+02]]

 [[6.7209999e+01 8.6481171e+01 3.4747181e+00 ... 2.3900999e+02
   7.7000000e+01 5.1100000e+02]
  [6.7391975e+01 8.7611565e+01 3.4177554e+00 ... 2.3480000e+02
   7.4250000e+01 5.2000000e+02]
  [6.8180542e+01 8.8097755e+01 3.4747181e+00 ... 2.4198000e+02
   7.7209999e+01 5.4900000e+02]
  [6.6967361e+01 8.5800507e+01 3.4177554e+00 ... 2.3400000e+02
   7.2000000e+01 5.0200000e+02]
  [4.1379220e+06 9.4909120e+06 7.6016664e+07 ... 6.3000960e+06
   6.0116660e+06 1.7468850e+06]
  [6.7515839e+01 8.7114258e+01 3.4465706e+00 ... 2.3615027e+02
   7.4655441e+01 5.2688196e+02]]

 [[6.7755928e+01 8.7575104e+01 3.4462368e+00 ... 2.3480000e+02
   7.6010002e+01 5.1120001e+02]
  [6.8119881e+01 8.9702187e+01 3.4747181e+00 ... 2.3499001e+02
   8.1680000e+01 5.5109003e+02]
  [6.8362518e+01 9.0212685e+01 3.5031993e+00 ... 2.3780000e+02
   8.1680000e+01 5.6500000e+02]
  [6.7088684e+01 8.7514328e+01 3.4177554e+00 ... 2.3313000e+02
   7.3510002e+01 5.1120001e+02]
  [6.0430455e+06 1.3663436e+07 9.0943256e+07 ... 4.8463090e+06
   5.3949400e+06 1.6735980e+06]
  [6.7670868e+01 8.9540276e+01 3.4568129e+00 ... 2.3500471e+02
   7.7036125e+01 5.4098755e+02]]], (374, 6, 265)
valid data: tensor([[[5.7595e+01, 7.4151e+01, 4.5287e+00,  ...,        nan,
                 nan,        nan],
         [5.7830e+01, 7.1262e+01, 4.4721e+00,  ...,        nan,
                 nan,        nan],
         [5.8713e+01, 7.4820e+01, 4.6136e+00,  ...,        nan,
                 nan,        nan],
         [5.7418e+01, 7.1047e+01, 4.4438e+00,  ...,        nan,
                 nan,        nan],
         [2.8893e+06, 6.0646e+06, 6.1401e+07,  ...,        nan,
                 nan,        nan],
         [5.8154e+01, 7.2179e+01, 4.5365e+00,  ...,        nan,
                 nan,        nan]],

        [[5.8654e+01, 6.9375e+01, 4.4438e+00,  ...,        nan,
                 nan,        nan],
         [5.8301e+01, 6.5614e+01, 4.4721e+00,  ...,        nan,
                 nan,        nan],
         [5.9007e+01, 6.9912e+01, 4.5287e+00,  ...,        nan,
                 nan,        nan],
         [5.8065e+01, 6.4384e+01, 4.4155e+00,  ...,        nan,
                 nan,        nan],
         [2.9652e+06, 1.3297e+07, 5.4786e+07,  ...,        nan,
                 nan,        nan],
         [5.8531e+01, 6.7070e+01, 4.4684e+00,  ...,        nan,
                 nan,        nan]],

        [[5.8477e+01, 6.4288e+01, 4.5004e+00,  ...,        nan,
                 nan,        nan],
         [5.9477e+01, 6.6879e+01, 4.6136e+00,  ...,        nan,
                 nan,        nan],
         [5.9536e+01, 6.7011e+01, 4.6419e+00,  ...,        nan,
                 nan,        nan],
         [5.8477e+01, 6.4002e+01, 4.4721e+00,  ...,        nan,
                 nan,        nan],
         [3.7030e+06, 8.7752e+06, 6.3759e+07,  ...,        nan,
                 nan,        nan],
         [5.9122e+01, 6.5841e+01, 4.5498e+00,  ...,        nan,
                 nan,        nan]],

        ...,

        [[6.7271e+01, 8.6785e+01, 3.4747e+00,  ..., 2.3806e+02,
          6.7630e+01, 4.7880e+02],
         [6.7089e+01, 8.6275e+01, 3.4747e+00,  ..., 2.4229e+02,
          7.0190e+01, 5.2500e+02],
         [6.7817e+01, 8.7660e+01, 3.5032e+00,  ..., 2.4490e+02,
          7.0190e+01, 5.2579e+02],
         [6.6967e+01, 8.5873e+01, 3.4462e+00,  ..., 2.3799e+02,
          6.7630e+01, 4.7600e+02],
         [4.9725e+06, 1.0627e+07, 8.7998e+07,  ..., 3.8526e+06,
          1.8479e+06, 1.8417e+06],
         [6.7265e+01, 8.6647e+01, 3.4752e+00,  ..., 2.4204e+02,
          6.9771e+01, 5.0292e+02]],

        [[6.7210e+01, 8.6481e+01, 3.4747e+00,  ..., 2.3901e+02,
          7.7000e+01, 5.1100e+02],
         [6.7392e+01, 8.7612e+01, 3.4178e+00,  ..., 2.3480e+02,
          7.4250e+01, 5.2000e+02],
         [6.8181e+01, 8.8098e+01, 3.4747e+00,  ..., 2.4198e+02,
          7.7210e+01, 5.4900e+02],
         [6.6967e+01, 8.5801e+01, 3.4178e+00,  ..., 2.3400e+02,
          7.2000e+01, 5.0200e+02],
         [4.1379e+06, 9.4909e+06, 7.6017e+07,  ..., 6.3001e+06,
          6.0117e+06, 1.7469e+06],
         [6.7516e+01, 8.7114e+01, 3.4466e+00,  ..., 2.3615e+02,
          7.4655e+01, 5.2688e+02]],

        [[6.7756e+01, 8.7575e+01, 3.4462e+00,  ..., 2.3480e+02,
          7.6010e+01, 5.1120e+02],
         [6.8120e+01, 8.9702e+01, 3.4747e+00,  ..., 2.3499e+02,
          8.1680e+01, 5.5109e+02],
         [6.8363e+01, 9.0213e+01, 3.5032e+00,  ..., 2.3780e+02,
          8.1680e+01, 5.6500e+02],
         [6.7089e+01, 8.7514e+01, 3.4178e+00,  ..., 2.3313e+02,
          7.3510e+01, 5.1120e+02],
         [6.0430e+06, 1.3663e+07, 9.0943e+07,  ..., 4.8463e+06,
          5.3949e+06, 1.6736e+06],
         [6.7671e+01, 8.9540e+01, 3.4568e+00,  ..., 2.3500e+02,
          7.7036e+01, 5.4099e+02]]]), torch.Size([374, 6, 265])
instruments: hs300
raw df:                             $open      $close  ...       $volume       $vwap
datetime   instrument                          ...                          
2019-08-06 SH600000     67.331314   67.270660  ...  7.452146e+06   67.347801
           SH600009     93.082047   95.216736  ...  1.013790e+07   93.722412
           SH600010      4.357638    4.272194  ...  1.018930e+08    4.277699
           SH600011      9.384294    9.624917  ...  1.677594e+07    9.502217
           SH600015     17.344748   17.417017  ...  8.411508e+06   17.377920
...                           ...         ...  ...           ...         ...
2023-08-11 SZ300751    963.043640  941.549194  ...  2.943202e+05  949.165955
           SZ300759     69.619865   67.315178  ...  1.249340e+07   68.694756
           SZ300760    280.070007  276.232025  ...  4.440344e+06  277.836975
           SZ300763    400.967407  391.187714  ...  2.033148e+06  396.690125
           SZ300782    654.953186  639.436157  ...  3.401388e+05  643.991699

[259698 rows x 6 columns]
preprocessed df:                             $open      $close  ...       $volume       $vwap
datetime   instrument                          ...                          
2019-08-06 SH600000     67.331314   67.270660  ...  7.452146e+06   67.347801
           SH600009     93.082047   95.216736  ...  1.013790e+07   93.722412
           SH600010      4.357638    4.272194  ...  1.018930e+08    4.277699
           SH600011      9.384294    9.624917  ...  1.677594e+07    9.502217
           SH600015     17.344748   17.417017  ...  8.411508e+06   17.377920
...                           ...         ...  ...           ...         ...
2023-08-11 SZ300751    963.043640  941.549194  ...  2.943202e+05  949.165955
           SZ300759     69.619865   67.315178  ...  1.249340e+07   68.694756
           SZ300760    280.070007  276.232025  ...  4.440344e+06  277.836975
           SZ300763    400.967407  391.187714  ...  2.033148e+06  396.690125
           SZ300782    654.953186  639.436157  ...  3.401388e+05  643.991699

[259698 rows x 6 columns]
df after stack: instrument              SH600000      SH600009  ...      SZ300763      SZ300782
datetime                                        ...                            
2019-08-06 $open    6.733131e+01  9.308205e+01  ...  3.563924e+01  2.244175e+02
           $close   6.727066e+01  9.521674e+01  ...  3.595101e+01  2.305114e+02
           $high    6.811988e+01  9.612127e+01  ...  3.603869e+01  2.342416e+02
           $low     6.654276e+01  9.209309e+01  ...  3.411936e+01  2.200391e+02
           $volume  7.452146e+06  1.013790e+07  ...  1.236556e+06  2.041850e+06
...                          ...           ...  ...           ...           ...
2023-08-11 $close   5.358810e+01  5.786763e+01  ...  3.911877e+02  6.394362e+02
           $high    5.514461e+01  5.937786e+01  ...  4.021128e+02  6.578267e+02
           $low     5.358810e+01  5.783079e+01  ...  3.911877e+02  6.394362e+02
           $volume  4.998864e+06  1.474086e+07  ...  2.033148e+06  3.401388e+05
           $vwap    5.414545e+01  5.854885e+01  ...  3.966901e+02  6.439917e+02

[5856 rows x 267 columns]
features: ['$open', '$close', '$high', '$low', '$volume', '$vwap']
dates: DatetimeIndex(['2019-08-06', '2019-08-07', '2019-08-08', '2019-08-09',
               '2019-08-12', '2019-08-13', '2019-08-14', '2019-08-15',
               '2019-08-16', '2019-08-19',
               ...
               '2023-07-31', '2023-08-01', '2023-08-02', '2023-08-03',
               '2023-08-04', '2023-08-07', '2023-08-08', '2023-08-09',
               '2023-08-10', '2023-08-11'],
              dtype='datetime64[ns]', name='datetime', length=976, freq=None)
stock ids: Index(['SH600000', 'SH600009', 'SH600010', 'SH600011', 'SH600015', 'SH600016',
       'SH600018', 'SH600019', 'SH600023', 'SH600025',
       ...
       'SZ300496', 'SZ300498', 'SZ300628', 'SZ300661', 'SZ300750', 'SZ300751',
       'SZ300759', 'SZ300760', 'SZ300763', 'SZ300782'],
      dtype='object', name='instrument', length=267)
values: [[[6.73313141e+01 9.30820465e+01 4.35763836e+00 ... 1.50000000e+02
   3.56392365e+01 2.24417511e+02]
  [6.72706604e+01 9.52167358e+01 4.27219439e+00 ... 1.52809998e+02
   3.59510078e+01 2.30511414e+02]
  [6.81198807e+01 9.61212692e+01 4.35763836e+00 ... 1.54860001e+02
   3.60386925e+01 2.34241577e+02]
  [6.65427551e+01 9.20930939e+01 4.21523190e+00 ... 1.49210007e+02
   3.41193581e+01 2.20039062e+02]
  [7.45214550e+06 1.01379010e+07 1.01892984e+08 ... 2.19341500e+06
   1.23655562e+06 2.04184962e+06]
  [6.73478012e+01 9.37224121e+01 4.27769899e+00 ... 1.52412476e+02
   3.51813469e+01 2.27876511e+02]]

 [[6.75739517e+01 9.60609665e+01 4.27219439e+00 ... 1.53660004e+02
   3.61068916e+01 2.30680969e+02]
  [6.71493378e+01 9.52891006e+01 4.32915688e+00 ... 1.55869995e+02
   3.69058037e+01 2.35408493e+02]
  [6.76952744e+01 9.72067032e+01 4.38611937e+00 ... 1.57229996e+02
   3.71298904e+01 2.44354874e+02]
  [6.70280228e+01 9.52891006e+01 4.24371290e+00 ... 1.53029999e+02
   3.58730659e+01 2.25504639e+02]
  [5.18672650e+06 4.99533050e+06 7.57949280e+07 ... 1.79728600e+06
   1.43831450e+06 2.50186600e+06]
  [6.73386993e+01 9.60424271e+01 4.30293894e+00 ... 1.55325592e+02
   3.65298843e+01 2.35956390e+02]]

 [[6.76346130e+01 9.57473907e+01 4.30067539e+00 ... 1.57300003e+02
   3.68473473e+01 2.39368042e+02]
  [6.83018570e+01 9.73876038e+01 4.30067539e+00 ... 1.60149994e+02
   3.81431427e+01 2.56333252e+02]
  [6.86051559e+01 9.87504272e+01 4.32915688e+00 ... 1.61649994e+02
   3.86692543e+01 2.58946350e+02]
  [6.73919754e+01 9.57473907e+01 4.27219439e+00 ... 1.55000000e+02
   3.65160904e+01 2.35548126e+02]
  [5.48280900e+06 6.82624100e+06 4.90394160e+07 ... 2.02856500e+06
   2.25365025e+06 3.70768500e+06]
  [6.80683212e+01 9.76518326e+01 4.30077076e+00 ... 1.59363571e+02
   3.78783989e+01 2.51735519e+02]]

 ...

 [[5.55893211e+01 5.64065094e+01 5.42620087e+00 ... 2.83596802e+02
   3.79822113e+02 6.47847717e+02]
  [5.59599152e+01 5.67134666e+01 5.42620087e+00 ... 2.81366638e+02
   3.81980682e+02 6.45287720e+02]
  [5.59599152e+01 5.70940933e+01 5.48362112e+00 ... 2.83596802e+02
   3.89954224e+02 6.55684631e+02]
  [5.53669624e+01 5.63328400e+01 5.39749098e+00 ... 2.78690399e+02
   3.78941071e+02 6.36353638e+02]
  [2.40053800e+06 5.27038700e+06 5.95934400e+07 ... 8.40822400e+06
   1.16010638e+06 4.40774125e+05]
  [5.57947121e+01 5.67623444e+01 5.43603802e+00 ... 2.81020081e+02
   3.84192047e+02 6.46966858e+02]]

 [[5.52187271e+01 5.71554871e+01 5.42620087e+00 ... 2.81107300e+02
   3.78985107e+02 6.40376587e+02]
  [5.49963684e+01 5.87271080e+01 5.39749098e+00 ... 2.80287842e+02
   4.03302185e+02 6.52602112e+02]
  [5.52928429e+01 5.87516670e+01 5.45491076e+00 ... 2.81999390e+02
   4.10835205e+02 6.55423401e+02]
  [5.44775352e+01 5.70449829e+01 5.36878061e+00 ... 2.77663483e+02
   3.78897003e+02 6.38077759e+02]
  [7.13248050e+06 1.90091380e+07 5.59223600e+07 ... 5.68937700e+06
   4.33674300e+06 4.12218531e+05]
  [5.48347664e+01 5.81938019e+01 5.40718937e+00 ... 2.79349274e+02
   3.99201782e+02 6.51167419e+02]]

 [[5.51446075e+01 5.87639427e+01 5.42620087e+00 ... 2.80070007e+02
   4.00967407e+02 6.54953186e+02]
  [5.35881042e+01 5.78676262e+01 5.28265047e+00 ... 2.76232025e+02
   3.91187714e+02 6.39436157e+02]
  [5.51446075e+01 5.93778572e+01 5.42620087e+00 ... 2.81719299e+02
   4.02112762e+02 6.57826660e+02]
  [5.35881042e+01 5.78307915e+01 5.28265047e+00 ... 2.76003815e+02
   3.91187714e+02 6.39436157e+02]
  [4.99886400e+06 1.47408620e+07 6.91501680e+07 ... 4.44034450e+06
   2.03314788e+06 3.40138812e+05]
  [5.41454544e+01 5.85488510e+01 5.33458900e+00 ... 2.77836975e+02
   3.96690125e+02 6.43991699e+02]]], (976, 6, 267)
/Users/yangguangyu/anaconda3/envs/quant_dev/lib/python3.9/site-packages/torch/nn/modules/transformer.py:282: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.activation_relu_or_gelu was not True
  warnings.warn(f"enable_nested_tensor is True, but self.use_nested_tensor is False because {why_not_sparsity_fast_path}")
test data: tensor([[[6.7331e+01, 9.3082e+01, 4.3576e+00,  ..., 1.5000e+02,
          3.5639e+01, 2.2442e+02],
         [6.7271e+01, 9.5217e+01, 4.2722e+00,  ..., 1.5281e+02,
          3.5951e+01, 2.3051e+02],
         [6.8120e+01, 9.6121e+01, 4.3576e+00,  ..., 1.5486e+02,
          3.6039e+01, 2.3424e+02],
         [6.6543e+01, 9.2093e+01, 4.2152e+00,  ..., 1.4921e+02,
          3.4119e+01, 2.2004e+02],
         [7.4521e+06, 1.0138e+07, 1.0189e+08,  ..., 2.1934e+06,
          1.2366e+06, 2.0418e+06],
         [6.7348e+01, 9.3722e+01, 4.2777e+00,  ..., 1.5241e+02,
          3.5181e+01, 2.2788e+02]],

        [[6.7574e+01, 9.6061e+01, 4.2722e+00,  ..., 1.5366e+02,
          3.6107e+01, 2.3068e+02],
         [6.7149e+01, 9.5289e+01, 4.3292e+00,  ..., 1.5587e+02,
          3.6906e+01, 2.3541e+02],
         [6.7695e+01, 9.7207e+01, 4.3861e+00,  ..., 1.5723e+02,
          3.7130e+01, 2.4435e+02],
         [6.7028e+01, 9.5289e+01, 4.2437e+00,  ..., 1.5303e+02,
          3.5873e+01, 2.2550e+02],
         [5.1867e+06, 4.9953e+06, 7.5795e+07,  ..., 1.7973e+06,
          1.4383e+06, 2.5019e+06],
         [6.7339e+01, 9.6042e+01, 4.3029e+00,  ..., 1.5533e+02,
          3.6530e+01, 2.3596e+02]],

        [[6.7635e+01, 9.5747e+01, 4.3007e+00,  ..., 1.5730e+02,
          3.6847e+01, 2.3937e+02],
         [6.8302e+01, 9.7388e+01, 4.3007e+00,  ..., 1.6015e+02,
          3.8143e+01, 2.5633e+02],
         [6.8605e+01, 9.8750e+01, 4.3292e+00,  ..., 1.6165e+02,
          3.8669e+01, 2.5895e+02],
         [6.7392e+01, 9.5747e+01, 4.2722e+00,  ..., 1.5500e+02,
          3.6516e+01, 2.3555e+02],
         [5.4828e+06, 6.8262e+06, 4.9039e+07,  ..., 2.0286e+06,
          2.2537e+06, 3.7077e+06],
         [6.8068e+01, 9.7652e+01, 4.3008e+00,  ..., 1.5936e+02,
          3.7878e+01, 2.5174e+02]],

        ...,

        [[5.5589e+01, 5.6407e+01, 5.4262e+00,  ..., 2.8360e+02,
          3.7982e+02, 6.4785e+02],
         [5.5960e+01, 5.6713e+01, 5.4262e+00,  ..., 2.8137e+02,
          3.8198e+02, 6.4529e+02],
         [5.5960e+01, 5.7094e+01, 5.4836e+00,  ..., 2.8360e+02,
          3.8995e+02, 6.5568e+02],
         [5.5367e+01, 5.6333e+01, 5.3975e+00,  ..., 2.7869e+02,
          3.7894e+02, 6.3635e+02],
         [2.4005e+06, 5.2704e+06, 5.9593e+07,  ..., 8.4082e+06,
          1.1601e+06, 4.4077e+05],
         [5.5795e+01, 5.6762e+01, 5.4360e+00,  ..., 2.8102e+02,
          3.8419e+02, 6.4697e+02]],

        [[5.5219e+01, 5.7155e+01, 5.4262e+00,  ..., 2.8111e+02,
          3.7899e+02, 6.4038e+02],
         [5.4996e+01, 5.8727e+01, 5.3975e+00,  ..., 2.8029e+02,
          4.0330e+02, 6.5260e+02],
         [5.5293e+01, 5.8752e+01, 5.4549e+00,  ..., 2.8200e+02,
          4.1084e+02, 6.5542e+02],
         [5.4478e+01, 5.7045e+01, 5.3688e+00,  ..., 2.7766e+02,
          3.7890e+02, 6.3808e+02],
         [7.1325e+06, 1.9009e+07, 5.5922e+07,  ..., 5.6894e+06,
          4.3367e+06, 4.1222e+05],
         [5.4835e+01, 5.8194e+01, 5.4072e+00,  ..., 2.7935e+02,
          3.9920e+02, 6.5117e+02]],

        [[5.5145e+01, 5.8764e+01, 5.4262e+00,  ..., 2.8007e+02,
          4.0097e+02, 6.5495e+02],
         [5.3588e+01, 5.7868e+01, 5.2827e+00,  ..., 2.7623e+02,
          3.9119e+02, 6.3944e+02],
         [5.5145e+01, 5.9378e+01, 5.4262e+00,  ..., 2.8172e+02,
          4.0211e+02, 6.5783e+02],
         [5.3588e+01, 5.7831e+01, 5.2827e+00,  ..., 2.7600e+02,
          3.9119e+02, 6.3944e+02],
         [4.9989e+06, 1.4741e+07, 6.9150e+07,  ..., 4.4403e+06,
          2.0331e+06, 3.4014e+05],
         [5.4145e+01, 5.8549e+01, 5.3346e+00,  ..., 2.7784e+02,
          3.9669e+02, 6.4399e+02]]]), torch.Size([976, 6, 267])
Using cpu device
Wrapping the env with a `Monitor` wrapper
Wrapping the env in a DummyVecEnv.
Logging to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852_1
/Users/yangguangyu/anaconda3/envs/quant_dev/lib/python3.9/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.action_masks to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.action_masks` for environment variables or `env.get_wrapper_attr('action_masks')` that will search the reminding wrappers.[0m
  logger.warn(
/Users/yangguangyu/anaconda3/envs/quant_dev/lib/python3.9/site-packages/stable_baselines3/common/save_util.py:283: UserWarning: Path '/Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852' does not exist. Will create it.
  warnings.warn(f"Path '{path.parent}' does not exist. Will create it.")
Ref(Mul($high,Greater($close,Constant(0.5))),40)
Add(Sub(Constant(-5.0),Sub($low,Greater(Constant(10.0),$vwap))),Constant(0.01))
Abs(Add(WMA(Corr($volume,Sub($vwap,Div(Constant(0.5),Log(Add($vwap,Greater(Abs($close),Constant(-2.0)))))),40),40),Constant(0.5)))
Sub($close,$vwap)
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/2048_steps
---------------------------------
| pool/              |          |
|    best_ic_ret     | 0.0409   |
|    eval_cnt        | 4        |
|    significant     | 4        |
|    size            | 4        |
| rollout/           |          |
|    ep_len_mean     | 19.6     |
|    ep_rew_mean     | -0.959   |
| test/              |          |
|    ic              | 0.0097   |
|    rank_ic         | 0.0231   |
| time/              |          |
|    fps             | 277      |
|    iterations      | 1        |
|    time_elapsed    | 7        |
|    total_timesteps | 2048     |
---------------------------------
/Users/yangguangyu/anaconda3/envs/quant_dev/lib/python3.9/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.action_masks to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.action_masks` for environment variables or `env.get_wrapper_attr('action_masks')` that will search the reminding wrappers.[0m
  logger.warn(
Ref($volume,20)
Mul(Constant(-10.0),$open)
Add(Constant(-5.0),$low)
Mul($vwap,Constant(5.0))
$high
Add($volume,Constant(-0.5))
$volume
$volume
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/4096_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.0801      |
|    eval_cnt             | 9           |
|    significant          | 8           |
|    size                 | 9           |
| rollout/                |             |
|    ep_len_mean          | 18.7        |
|    ep_rew_mean          | -0.916      |
| test/                   |             |
|    ic                   | 0.0288      |
|    rank_ic              | 0.0447      |
| time/                   |             |
|    fps                  | 72          |
|    iterations           | 2           |
|    time_elapsed         | 56          |
|    total_timesteps      | 4096        |
| train/                  |             |
|    approx_kl            | 0.014105726 |
|    clip_fraction        | 0.181       |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.99       |
|    explained_variance   | -0.438      |
|    learning_rate        | 0.001       |
|    loss                 | -0.263      |
|    n_updates            | 10          |
|    policy_gradient_loss | -0.0172     |
|    value_loss           | 0.211       |
-----------------------------------------
Abs(Mean(Div(Less($low,WMA(Div(Constant(-0.5),Var(Mul($volume,Constant(-5.0)),20)),10)),Constant(-10.0)),40))
Sub(Mean(Add(Constant(-0.5),$close),50),Constant(0.01))
$volume
$vwap
Add($high,Constant(-30.0))
Log(Abs(Sub(Less(Greater(Sub(Constant(30.0),$low),Constant(-30.0)),Mul(Mul($vwap,Div(Add($low,Constant(5.0)),Constant(5.0))),$open)),$low)))
Add(Constant(2.0),$low)
$close
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/6144_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.0814      |
|    eval_cnt             | 11          |
|    significant          | 10          |
|    size                 | 11          |
| rollout/                |             |
|    ep_len_mean          | 19          |
|    ep_rew_mean          | -0.929      |
| test/                   |             |
|    ic                   | 0.0305      |
|    rank_ic              | 0.0479      |
| time/                   |             |
|    fps                  | 56          |
|    iterations           | 3           |
|    time_elapsed         | 109         |
|    total_timesteps      | 6144        |
| train/                  |             |
|    approx_kl            | 0.015061667 |
|    clip_fraction        | 0.159       |
|    clip_range           | 0.2         |
|    entropy_loss         | -3          |
|    explained_variance   | 2.56e-06    |
|    learning_rate        | 0.001       |
|    loss                 | -0.309      |
|    n_updates            | 20          |
|    policy_gradient_loss | -0.0187     |
|    value_loss           | 0.0251      |
-----------------------------------------
Sub(Sub(Greater(Mul(Constant(0.01),$volume),Constant(-1.0)),$volume),Add(Var(Mul(Greater(Constant(-0.01),Mul($open,Constant(5.0))),$high),50),Constant(-5.0)))
$close
Mul(Constant(-0.01),Add($volume,$high))
Ref(Med(Add(Sub(Std(Sub(Constant(-0.5),Mul($open,$close)),40),Constant(-2.0)),Constant(-2.0)),30),10)
$close
$low
Med(Sub(Div(Add(Constant(-1.0),Std($low,30)),Greater(Constant(0.5),Div(Add($vwap,Greater(Constant(-30.0),$low)),Constant(10.0)))),Constant(-30.0)),30)
Greater($volume,$low)
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/8192_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.0817      |
|    eval_cnt             | 15          |
|    significant          | 13          |
|    size                 | 15          |
| rollout/                |             |
|    ep_len_mean          | 19.1        |
|    ep_rew_mean          | -0.928      |
| test/                   |             |
|    ic                   | 0.0287      |
|    rank_ic              | 0.0496      |
| time/                   |             |
|    fps                  | 50          |
|    iterations           | 4           |
|    time_elapsed         | 163         |
|    total_timesteps      | 8192        |
| train/                  |             |
|    approx_kl            | 0.014400411 |
|    clip_fraction        | 0.213       |
|    clip_range           | 0.2         |
|    entropy_loss         | -3          |
|    explained_variance   | 1.49e-06    |
|    learning_rate        | 0.001       |
|    loss                 | -0.302      |
|    n_updates            | 30          |
|    policy_gradient_loss | -0.0174     |
|    value_loss           | 0.0195      |
-----------------------------------------
$vwap
Std(Div(Constant(-2.0),$close),50)
Med(Mul(Div(Greater(Constant(-1.0),Log($close)),Add($close,Mul(Div(Constant(5.0),$open),Greater($open,Constant(-0.01))))),Constant(-0.5)),20)
Sub($volume,Constant(5.0))
Add(Sub(Constant(5.0),Add($low,Div(Delta(Abs(Less(Mad(Sub($close,$close),20),$open)),50),Constant(-0.5)))),Constant(0.5))
Add(EMA(Sub(Constant(2.0),Div(Add(Abs(Sub(Med($open,50),Abs($volume))),Constant(-10.0)),Constant(0.5))),20),Ref($low,30))
$volume
Var(Add(Constant(-0.5),Min(Greater($high,Sub($volume,Constant(-0.5))),40)),30)
Sub(Sub(Mad(Log(Mul($volume,Sub(Mul(Std(Add(Constant(0.5),$vwap),50),Constant(-0.5)),Constant(-30.0)))),40),Constant(-30.0)),$high)
Mul(Greater(Constant(-5.0),$low),$vwap)
Sub(Constant(-2.0),$open)
Sub(Constant(-2.0),Div(Less($vwap,Constant(5.0)),$close))
Mean(Med(Mul(Constant(-5.0),$volume),10),20)
Add(Sub($vwap,Mul(Constant(2.0),$open)),Constant(-5.0))
Div(Add(Constant(-0.01),Div(Abs($volume),$vwap)),Constant(-1.0))
Div(Abs(Add(Mul(Add(Div($volume,$close),Abs(Mul($vwap,Constant(-1.0)))),Constant(-0.01)),Constant(-1.0))),Constant(-30.0))
Div(Constant(-2.0),$close)
$open
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/10240_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.0932      |
|    eval_cnt             | 26          |
|    significant          | 21          |
|    size                 | 26          |
| rollout/                |             |
|    ep_len_mean          | 18.4        |
|    ep_rew_mean          | -0.831      |
| test/                   |             |
|    ic                   | 0.0421      |
|    rank_ic              | 0.0629      |
| time/                   |             |
|    fps                  | 45          |
|    iterations           | 5           |
|    time_elapsed         | 225         |
|    total_timesteps      | 10240       |
| train/                  |             |
|    approx_kl            | 0.013961375 |
|    clip_fraction        | 0.235       |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.98       |
|    explained_variance   | 3.58e-07    |
|    learning_rate        | 0.001       |
|    loss                 | -0.299      |
|    n_updates            | 40          |
|    policy_gradient_loss | -0.0172     |
|    value_loss           | 0.0214      |
-----------------------------------------
Mul(Div(Less(Constant(-10.0),Abs($close)),$open),Constant(-0.5))
Add(Mul(Mean(Add($volume,Greater(Constant(10.0),EMA($high,30))),10),Constant(-0.5)),Sub(Constant(5.0),$vwap))
Add(Log($low),Mean(Add(Constant(5.0),Add($low,$close)),10))
Mul(Constant(-0.01),$low)
Div(Mean(Mul($low,$low),20),Constant(-10.0))
Div(Div(Constant(-5.0),$vwap),Constant(2.0))
Ref(Sub(Mul(Mul(Less(Mul(Sub(Add(Constant(-0.5),Add($close,Constant(2.0))),Constant(10.0)),Constant(0.5)),Constant(5.0)),$low),Constant(-10.0)),Constant(5.0)),40)
Corr(Sub($close,Constant(0.01)),$open,50)
Add($close,Mul(Add(Mul(Add(EMA($low,50),Constant(-0.5)),Constant(5.0)),Mul($low,Constant(1.0))),Less($vwap,Greater(Constant(1.0),$low))))
Div(Mul(Constant(-1.0),WMA($close,30)),Sub(Sub(Constant(-30.0),Min(Mul($volume,Constant(-1.0)),40)),Constant(-5.0)))
Add(Constant(30.0),$open)
Sub($vwap,Mul(Sub(Constant(-5.0),$close),Constant(-2.0)))
Sub(Min(Med($high,40),10),Constant(-0.01))
Abs(Mul(Constant(-10.0),$volume))
Add(Mul(Constant(-5.0),$close),Div(Constant(-5.0),Mul(Less($open,Constant(0.01)),Mul($close,Constant(2.0)))))
Add(Div(Constant(0.5),Var($close,10)),Div($vwap,Constant(30.0)))
Div(Constant(-0.5),Ref(Add($vwap,Less(Add(Constant(2.0),Sub(Less($open,Constant(-0.5)),Sub(Div($open,Constant(30.0)),Constant(-0.01)))),Constant(-1.0))),30))
Mul(Constant(-2.0),Add(Div(Ref(Div($vwap,Constant(0.5)),20),Constant(30.0)),Constant(-5.0)))
Add(Constant(-5.0),$open)
Mad(Log(Div(Constant(2.0),Sub($close,Constant(0.01)))),50)
Mul(Div(Less(Mul(Add($close,Add($vwap,Greater($open,Less($volume,Constant(0.5))))),Constant(-0.5)),Mad($open,40)),Constant(10.0)),Constant(0.5))
Sub(Less(Sub(Constant(-0.01),$high),Constant(-5.0)),Ref(Add($volume,Constant(0.5)),20))
Var(Add(Constant(10.0),Sub($open,Constant(5.0))),30)
Mul(Sub(Constant(-0.5),Sub($vwap,$close)),Greater(Mul(Div(Constant(-0.5),Mul($vwap,$close)),Constant(-5.0)),Greater(Constant(-1.0),$low)))
Log($close)
$open
Mul(Constant(-1.0),$vwap)
Sub(Greater(Greater(Less(Constant(-5.0),$close),Mul($low,$volume)),$volume),$low)
Add(Constant(-1.0),Abs($open))
$close
Sub(Mul(Div(Constant(-2.0),Add($high,Less(Mul(Less($low,Add(Div($low,$open),Constant(-0.5))),Constant(-2.0)),Constant(1.0)))),$low),Constant(-30.0))
Mul($vwap,Mul($vwap,Sub(Sub(Constant(-2.0),Add($volume,Add($volume,Add(Constant(-30.0),Mul($open,Constant(0.01)))))),Div($vwap,$low))))
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/12288_steps
----------------------------------------
| pool/                   |            |
|    best_ic_ret          | 0.102      |
|    eval_cnt             | 44         |
|    significant          | 33         |
|    size                 | 44         |
| rollout/                |            |
|    ep_len_mean          | 17.4       |
|    ep_rew_mean          | -0.704     |
| test/                   |            |
|    ic                   | 0.0578     |
|    rank_ic              | 0.0715     |
| time/                   |            |
|    fps                  | 40         |
|    iterations           | 6          |
|    time_elapsed         | 304        |
|    total_timesteps      | 12288      |
| train/                  |            |
|    approx_kl            | 0.01500045 |
|    clip_fraction        | 0.232      |
|    clip_range           | 0.2        |
|    entropy_loss         | -2.97      |
|    explained_variance   | 1.79e-07   |
|    learning_rate        | 0.001      |
|    loss                 | -0.297     |
|    n_updates            | 50         |
|    policy_gradient_loss | -0.0237    |
|    value_loss           | 0.0501     |
----------------------------------------
Div(Sub(WMA(Div(Max(Sub(Constant(5.0),$low),20),Constant(-5.0)),10),Constant(-2.0)),Constant(-0.01))
Mul(Mul(Add(Less(Greater(Mean(Add(Constant(10.0),Mul($low,WMA($high,40))),40),Constant(-30.0)),$volume),$close),Constant(-10.0)),Constant(2.0))
Sub(Constant(-5.0),$high)
Sub(Greater(Min(Add(Delta(Log($low),10),Constant(0.01)),40),Constant(-5.0)),$close)
$volume
Mul(Mul($open,Constant(-1.0)),$volume)
Sub(Less(Constant(-5.0),Sub(Max(Add($vwap,Sub(Constant(-0.5),$low)),40),Mul(Constant(-30.0),Sub($close,$low)))),Mad($open,30))
Add(Add(Add(Sub(Constant(-2.0),$open),Delta(Add(Div(Constant(0.5),$close),Div(Greater(Constant(-1.0),$open),$volume)),20)),Constant(-1.0)),Constant(-2.0))
$low
Add(Add(Less(Div(Div(Ref(Med($low,30),40),Constant(1.0)),Constant(5.0)),Constant(0.5)),$volume),$volume)
Mul(Sub(Mul(Constant(1.0),Add($low,Constant(10.0))),Constant(5.0)),Constant(-1.0))
Mul(Ref(Var(Add(Less(EMA($volume,40),Mad($low,20)),$close),40),20),$high)
Mul($close,Ref(Add(Div($volume,Constant(-30.0)),$high),50))
Add($vwap,Add($close,Constant(-0.5)))
Sub(Add(Div(Less(Log(Ref(Sub(Constant(-30.0),$vwap),30)),Constant(-0.5)),$close),Constant(-0.01)),Constant(5.0))
Add(Constant(-5.0),$low)
Add($vwap,Constant(-0.01))
Mul(Mul(Constant(30.0),Var($low,10)),Constant(5.0))
Add(Add(Constant(30.0),Mul(Greater(Less($vwap,Constant(10.0)),Mul(Greater(Mul($high,Constant(-10.0)),Constant(5.0)),Mul($volume,$close))),$volume)),Constant(-2.0))
Sub(Sub(Constant(0.01),$vwap),$close)
Mul($close,Constant(-2.0))
Med(EMA($close,30),30)
Mul(Constant(30.0),Add($open,Var($low,40)))
Med(Add(Div(Less(Constant(5.0),Corr(Delta($high,50),Div(Constant(-30.0),$volume),50)),Log(Mean($high,30))),Constant(-10.0)),50)
Mul(Sub(Mul(Mul(Less(Constant(0.5),$vwap),Log(Mul($vwap,$low))),Constant(-1.0)),Less($close,Constant(2.0))),Constant(-2.0))
$open
Div(Sub(Constant(-0.01),$vwap),Add(Less(Sub($vwap,Constant(1.0)),Constant(-5.0)),Mul(Med(Add($open,Constant(-2.0)),20),Greater(Constant(-10.0),$vwap))))
Log(Add($vwap,Constant(-0.01)))
Mul(Greater(Add(Sub(Log(Sub(Constant(30.0),Mul($vwap,Constant(0.01)))),Less(Add(Constant(0.5),$low),$high)),Constant(5.0)),Constant(5.0)),$volume)
EMA(Min(Sub($volume,Var($low,40)),50),30)
Mul(Corr(Sub(Var(Add($close,Constant(10.0)),30),$vwap),Abs($close),40),WMA(Add(Mul($low,Constant(2.0)),Constant(-30.0)),40))
Add(Sub(Constant(5.0),Greater($open,$open)),$volume)
Mul(Sub(Constant(5.0),$close),Constant(5.0))
Mul(Constant(0.5),$volume)
Add($close,Constant(2.0))
Mul(Div(Constant(-0.5),$close),Add($volume,$vwap))
Std(Add($low,Mul(Mul(Mul(Div($low,Var(Log($open),20)),Constant(-30.0)),Constant(-2.0)),Mul(Abs($vwap),Constant(-30.0)))),30)
Add(Div(Div(Sub(Sub(Add(Constant(1.0),$close),Constant(10.0)),Constant(5.0)),Sub($close,Div($volume,Mul($volume,Constant(-2.0))))),Constant(-1.0)),Constant(0.5))
Mul(Constant(10.0),Add(Less(Sub(Sub(Add(Sub($vwap,EMA($vwap,10)),$high),$vwap),Less(Constant(10.0),$close)),Constant(5.0)),$vwap))
Sub(Mul(Greater(Mad($volume,30),Sub(Constant(-5.0),Mul(Add(Div($vwap,Constant(0.5)),Constant(-2.0)),$low))),Add($volume,Constant(-0.01))),Constant(1.0))
Sub(Sub(Mul(Greater(Constant(-5.0),$low),Div(Div(Div(Med($volume,30),Constant(5.0)),Constant(-5.0)),$volume)),Constant(-2.0)),$open)
Sub(Constant(-1.0),$high)
Ref(Sub(Constant(-0.01),$volume),20)
Med($open,10)
Div(Log(Add(Sub($close,$vwap),$volume)),Constant(-2.0))
Mul(Div(Sub(Greater($volume,Std($open,40)),Constant(-1.0)),Constant(-0.01)),Ref(Mul(Constant(-10.0),$high),30))
Add(Greater($close,Constant(-5.0)),$vwap)
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/14336_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.157       |
|    eval_cnt             | 65          |
|    significant          | 40          |
|    size                 | 65          |
| rollout/                |             |
|    ep_len_mean          | 16.6        |
|    ep_rew_mean          | -0.611      |
| test/                   |             |
|    ic                   | 0.0707      |
|    rank_ic              | 0.0677      |
| time/                   |             |
|    fps                  | 34          |
|    iterations           | 7           |
|    time_elapsed         | 419         |
|    total_timesteps      | 14336       |
| train/                  |             |
|    approx_kl            | 0.012327798 |
|    clip_fraction        | 0.19        |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.94       |
|    explained_variance   | 1.79e-07    |
|    learning_rate        | 0.001       |
|    loss                 | -0.289      |
|    n_updates            | 60          |
|    policy_gradient_loss | -0.0251     |
|    value_loss           | 0.0901      |
-----------------------------------------
Mul(Sub(Sub(Sum(Abs(Div(Div(Constant(0.5),Var(Log($volume),10)),Constant(-0.5))),10),Constant(-5.0)),Constant(-1.0)),$volume)
Div(Constant(-5.0),$volume)
Add(Constant(10.0),Add(Div(Med(Ref(Max($low,20),40),20),Constant(-2.0)),Constant(1.0)))
Mul(Sub(Constant(-30.0),$volume),Constant(0.5))
Div(Greater($open,$low),$high)
Mul(Mul(Add(Div(Constant(30.0),$open),Sub(Constant(5.0),$low)),Constant(-0.5)),Constant(-10.0))
WMA(Sub(Sub(Constant(0.5),$vwap),Constant(-2.0)),30)
$high
Add(Add(Constant(-10.0),$close),Constant(0.01))
Sub(Mul(Mul(Less(Add($open,Sub($open,Add($volume,$close))),Constant(-0.01)),$vwap),Constant(-0.5)),Log($volume))
Log($vwap)
Add(Sub(Less(Constant(5.0),$low),$volume),Std(Mul(Div($close,Mad($vwap,40)),Div(Constant(-30.0),Mul($vwap,Constant(-30.0)))),20))
Greater(Div(Constant(-10.0),$vwap),Abs($high))
$volume
Add(Sub(Constant(-10.0),$low),Constant(0.5))
Add(Mul(Div(Sub(Less(Constant(5.0),Div($low,Constant(5.0))),Mul(Sub(Mul($open,Constant(-30.0)),Constant(0.01)),Constant(-5.0))),Constant(1.0)),Constant(2.0)),Constant(-2.0))
Add(Constant(1.0),$close)
Div(Mul(Cov(Abs(Add(Constant(-1.0),$close)),Div(EMA(Add($open,Constant(-0.5)),50),Constant(30.0)),10),Constant(30.0)),EMA($open,40))
Add(Greater(Constant(-5.0),Sub($high,$open)),Sub(Greater(Add($low,Constant(-30.0)),Constant(0.5)),$low))
Std(Mul(Add(Constant(5.0),Log($close)),Constant(0.01)),10)
$close
Sub(Div($low,Med(WMA(Div($vwap,$open),10),40)),$volume)
Var(Div(Constant(2.0),$open),10)
Mul(Mul(Mul(Greater(Div(Mul(Constant(-10.0),$close),Constant(0.5)),$close),Constant(-1.0)),Constant(0.01)),Constant(2.0))
Less($open,Mul($vwap,Constant(-2.0)))
Delta(Add(Less(Constant(0.01),Add(Add($open,$vwap),$low)),Div(Div(Mul(Mul($high,Constant(2.0)),Constant(-0.01)),Constant(2.0)),Constant(5.0))),20)
Greater(Sub(Less(Constant(-0.01),$close),Sub($vwap,Constant(-0.5))),$vwap)
Ref(Mul($volume,Constant(-5.0)),40)
Mul(Constant(5.0),Mul(Ref(Mul($vwap,Constant(30.0)),20),Sub(Constant(-1.0),Add($open,Constant(1.0)))))
Sub(Constant(1.0),$vwap)
$low
Sub(Add(Sub(Sub($close,Constant(-1.0)),$volume),Sub(Sub($open,Constant(-10.0)),Constant(2.0))),$vwap)
WMA(Div(Mul(Constant(-2.0),Div(Log(Abs($low)),Constant(-5.0))),Add($vwap,$volume)),20)
Mul(Constant(0.01),Mean(Sub(Sub(Greater($vwap,Constant(-2.0)),Sub(Med(Med($close,40),20),Sub(Constant(-1.0),$close))),Constant(2.0)),10))
Add(Var(Var($low,20),10),Constant(2.0))
Add(Constant(-10.0),Var(EMA($vwap,30),10))
Min(Delta(Ref($open,10),10),20)
Mul(Log(Mul(Log(Add(Add(Constant(-1.0),$close),Constant(10.0))),Constant(2.0))),Constant(-0.01))
Mul(Sum(Add(Constant(-30.0),Log($volume)),40),Constant(-5.0))
$high
Mul(Abs(Abs(Mean($volume,20))),Constant(5.0))
Log(Less($volume,Sub(Mul(Med(Mad($low,50),40),Constant(2.0)),Add($high,Constant(-0.01)))))
Sub(Greater(Constant(-1.0),Med(Add($open,Constant(30.0)),40)),$low)
Div(Var(Div($high,Div(Greater(Constant(-0.01),Ref($volume,20)),Sub(Less($close,Constant(-10.0)),$open))),50),Less(Constant(-30.0),$vwap))
$vwap
Mul(Add(Ref(Cov($close,Mul($low,Constant(-0.5)),20),50),Constant(-1.0)),Constant(-0.5))
Sub($close,Constant(-1.0))
Min(Abs(Add(Sub(Constant(0.5),Mul(Greater($high,Log(Sub($low,$low))),Constant(-10.0))),Constant(-10.0))),40)
Log(Div(Sub(Add(Greater(Log(Log(Abs(Mean(Min(Less($low,$low),30),40)))),Constant(30.0)),$volume),Constant(1.0)),Constant(0.5)))
Var(Mul(Constant(-30.0),$vwap),30)
$close
Sub(Add(Constant(-0.01),$vwap),$vwap)
Add(Greater(Greater(Constant(-10.0),EMA(Add($close,Constant(-10.0)),10)),$open),$close)
Div(Add(Div(Mad(Div(Constant(-5.0),$low),40),Mul(Mean($close,40),Sub(Less($volume,Constant(-0.01)),$low))),$high),$high)
Abs(Add(Div(Div(Constant(5.0),$low),$high),Constant(-1.0)))
Mul(Add(Sub(WMA(Var(Add(Ref(Add(Constant(5.0),$open),20),Var($vwap,30)),20),40),Constant(-1.0)),Constant(-5.0)),Constant(0.5))
Sub(Greater(Mul(Mul(Mul(Constant(-0.01),Var($volume,30)),Constant(-30.0)),Constant(0.01)),Var(Div(Constant(2.0),Add($low,Constant(-2.0))),30)),Constant(30.0))
Div(Sub(Constant(10.0),$low),Constant(-0.01))
$vwap
$close
Med(Med(Add(Constant(30.0),$high),30),30)
Sub(Constant(5.0),$vwap)
Greater(Less(Med(Add(Mul(Constant(0.01),$close),Div(Constant(30.0),Mean($open,20))),40),Add($volume,Constant(1.0))),Less($open,$open))
$close
Add(Sub(Mad(Sum(Greater($low,Add($close,Mad(Min($vwap,40),20))),10),50),Div($high,$close)),Constant(-10.0))
Mean(Mul(Constant(0.01),Var($volume,40)),10)
Var(Ref(Add(Less(Add(Constant(-5.0),Med($vwap,30)),Constant(-0.01)),Less(Div(WMA($volume,20),Constant(0.01)),$open)),10),30)
Mean(Log(Sub(Constant(-10.0),Med(Log(Abs(Mul($vwap,Constant(-10.0)))),30))),30)
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/16384_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.168       |
|    eval_cnt             | 100         |
|    significant          | 67          |
|    size                 | 100         |
| rollout/                |             |
|    ep_len_mean          | 15.3        |
|    ep_rew_mean          | -0.465      |
| test/                   |             |
|    ic                   | 0.078       |
|    rank_ic              | 0.0689      |
| time/                   |             |
|    fps                  | 25          |
|    iterations           | 8           |
|    time_elapsed         | 640         |
|    total_timesteps      | 16384       |
| train/                  |             |
|    approx_kl            | 0.012460074 |
|    clip_fraction        | 0.185       |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.89       |
|    explained_variance   | 1.79e-07    |
|    learning_rate        | 0.001       |
|    loss                 | -0.259      |
|    n_updates            | 70          |
|    policy_gradient_loss | -0.025      |
|    value_loss           | 0.119       |
-----------------------------------------
Mean(Div(Mul(Constant(2.0),$open),Sub(Sub(Constant(0.01),Mul($high,Add(Constant(-10.0),Log(Abs($volume))))),Constant(0.01))),30)
Add(Div($low,Greater($low,$close)),Constant(2.0))
Mul(Log(Add(Constant(-5.0),$high)),Constant(1.0))
Div(Add(Div(Log($vwap),Constant(2.0)),$high),$close)
Var(Less(Add(Sub(Mul(Mul(EMA(Div(Constant(-1.0),$vwap),50),Constant(-5.0)),$vwap),Constant(-5.0)),$high),Div(Constant(2.0),$high)),40)
Sub(Mul(Div(Mad(Med(Add(Var(Var(Div(Constant(-5.0),$close),20),30),Constant(30.0)),40),50),Constant(5.0)),Constant(-30.0)),Constant(0.5))
Add(Less(Mean(Sub(Constant(-0.01),$close),30),Add(Ref(Log(Sub($close,$vwap)),50),Constant(0.01))),Constant(0.5))
Var(Mul(Add(Abs($close),Constant(0.5)),$volume),40)
Add(Add(Mul(Mul(Greater($open,Constant(0.5)),Abs($close)),$vwap),Div($vwap,$vwap)),Constant(-1.0))
Sub(Abs(Div($low,WMA(Div(Add(Constant(-30.0),$open),Constant(1.0)),20))),$low)
Ref(Sub(Abs(Mul(Constant(1.0),$close)),Abs(Med($high,50))),30)
Div(Mad(Std(Std(Sub(Add(Mul(Log(Div(Constant(-5.0),$low)),Constant(30.0)),Constant(-30.0)),$vwap),40),30),20),Constant(2.0))
Mul(Sub(Sub(Add(Add(Greater(Constant(-5.0),Add(Less($close,Constant(-5.0)),$vwap)),Sub($low,Constant(5.0))),$high),$low),$high),Constant(30.0))
Add(Abs(Add($volume,Sub(Greater(Med(Abs(Add(Constant(-1.0),$volume)),50),$high),$vwap))),Constant(-2.0))
Add(Div(Add(Add(Constant(-0.5),$low),Ref($volume,10)),$volume),Constant(2.0))
Sub(Mul(Constant(1.0),$open),$vwap)
Sub(Greater(Abs(Add(Mul(Add(Mul(Constant(-0.01),$high),$close),Constant(-0.01)),Constant(1.0))),Constant(0.5)),Div(Sub($close,Log($low)),Constant(-5.0)))
Sub(Mul(Constant(2.0),Var($vwap,10)),$close)
Add(Constant(-10.0),$close)
Med(Add(Ref(Sub(Std(Div(Div(Sub($volume,Constant(30.0)),Constant(-5.0)),Constant(-0.5)),20),Less($volume,Constant(-0.5))),30),Constant(2.0)),20)
Sub(Constant(-30.0),$vwap)
Sub(Add(Add(Mul(Add(Less(Constant(-2.0),$volume),$high),$close),Constant(1.0)),Constant(-10.0)),Constant(-0.01))
Sub(Log(Add(Constant(-10.0),$vwap)),$close)
Mul(Constant(0.5),Sub($vwap,Constant(-30.0)))
$close
Div(Sub(Sub(Min(Sub(Add($volume,Constant(-1.0)),$vwap),10),$high),Constant(-5.0)),Constant(5.0))
Add(Mul(Sub(Mul(Sub(Less(Div(Mul(Constant(-5.0),$low),$low),$volume),$low),Constant(-5.0)),Constant(-5.0)),Constant(10.0)),$volume)
Add($low,Add($high,Div(Constant(-0.01),$close)))
Var(EMA(Abs(Div(Constant(-30.0),Less(Max(Mul($high,Div($vwap,Constant(1.0))),30),Add(Constant(-10.0),$low)))),10),40)
Log(Div(Less(Constant(0.5),Sub($close,Constant(5.0))),$open))
Max(Sub(Delta($vwap,50),Constant(-30.0)),20)
Mul(Constant(-2.0),Add($vwap,Constant(-5.0)))
Mul(Add(Div(Constant(1.0),$vwap),Constant(-0.5)),Add(Div(Add($low,Add(Add(Constant(-0.01),$volume),$high)),Constant(-10.0)),$low))
$vwap
Corr(Log(Sub(Constant(5.0),$low)),$volume,30)
Mean($high,20)
Sub(Div($close,Constant(10.0)),Constant(-1.0))
Less(Div($vwap,Min($close,20)),$close)
Add(Greater(Sub(Greater(Sum(Greater($open,Ref($open,10)),50),$vwap),Constant(-30.0)),Constant(-0.01)),$volume)
Mean(Add(Constant(-5.0),EMA(Sub(Abs(Corr(Med(Sub($low,Constant(2.0)),30),$vwap,10)),Constant(0.01)),40)),20)
Mul(Constant(5.0),$vwap)
Med(Ref(Var(Med(Div(Greater(Constant(-10.0),Add($vwap,Constant(2.0))),$close),20),50),50),30)
Sub(Div(Constant(30.0),$volume),Constant(-2.0))
$vwap
Abs(Mul(Constant(-1.0),Mul($volume,Constant(-2.0))))
Sub(Std(Sub(Constant(-10.0),Sub($high,Constant(-1.0))),30),$open)
Mul(Constant(-0.5),Add(Greater($volume,Var(Mul(Add(Abs($close),Constant(-10.0)),Constant(-0.5)),40)),Constant(-2.0)))
Sub(Max(Sub(Sum(Log(Add(Mul($volume,Constant(-5.0)),Constant(-0.5))),30),Constant(0.01)),30),Constant(0.01))
Abs(Mul(Sub(Sub(Constant(-5.0),Mul($vwap,Constant(10.0))),Constant(5.0)),Constant(-5.0)))
Sub(Sub(Mul($low,Div(Mul($vwap,Log($vwap)),Constant(2.0))),Delta(Mul($low,Mul($vwap,Constant(0.01))),30)),Constant(0.01))
Div(Mad(Add(Sum(Sub(Constant(2.0),Min($vwap,30)),30),Constant(-5.0)),20),Constant(-5.0))
EMA(Greater(Mul(Mul(Add($open,Constant(-0.01)),Constant(5.0)),Constant(0.5)),Mul($volume,Constant(5.0))),50)
Div(Div(Std(Add(Add(Sub(Add(Constant(5.0),Sub($vwap,Constant(-0.01))),Constant(10.0)),$high),Constant(-1.0)),20),Max($volume,40)),Constant(-2.0))
Mul(Constant(5.0),Sub($close,Sub($volume,$close)))
$open
Greater(Mul(Div($open,Sub($low,Constant(-2.0))),Constant(5.0)),Add($open,Var(Sub(Constant(-5.0),WMA($volume,20)),10)))
Add(Mul(Abs(Div(Sub(Constant(-2.0),$vwap),Constant(-0.01))),Greater($close,Constant(-1.0))),Constant(0.01))
Sub(Constant(-2.0),$open)
Mul(Constant(-0.01),$volume)
Sub(Div(Mul(Add(Less($volume,$low),Add(Ref($volume,30),Constant(-30.0))),Constant(-30.0)),Constant(10.0)),WMA($vwap,10))
Var(Mul(Constant(30.0),$open),20)
Med(Mul(Add(Mul($high,Constant(-10.0)),Constant(-30.0)),Constant(-0.01)),40)
Delta(Mul(Abs(Log($volume)),Mul($high,Constant(-0.5))),10)
EMA(Less(Div(Div(Mul(Sub(Mul(Constant(-0.01),Sub($volume,Constant(-0.5))),Constant(-0.01)),$open),Div(Constant(1.0),$high)),Constant(0.5)),$vwap),50)
Add($low,Add(Greater(Constant(0.01),$volume),$vwap))
Add(Sub($vwap,$high),Constant(1.0))
Add(Constant(2.0),Div(Greater(Less(Sub($volume,Constant(2.0)),Constant(-0.5)),$close),$open))
Med($close,40)
$low
Var(Med(Mean($low,10),20),30)
Div(Mean(Med(Div(Mul(Constant(-0.01),$volume),Constant(10.0)),30),30),Constant(0.5))
Add(Constant(-0.5),$open)
Div(Sub(Mul($low,$volume),Abs(Abs($high))),Constant(10.0))
Med($low,10)
Min(Abs(Abs(Add($close,Log(Add(Constant(30.0),$high))))),30)
Mul(Constant(1.0),$high)
Sub(Constant(30.0),Mul(Greater(Div($low,Greater(Mul(Constant(-2.0),$low),Constant(-0.01))),Less(Constant(-0.5),$volume)),Var($vwap,10)))
Add(Mul(Constant(1.0),$volume),Constant(-0.01))
Add($open,Constant(-2.0))
Min(Mul(Constant(-1.0),$vwap),20)
Add(Constant(2.0),$volume)
Mul(Add($volume,Constant(-10.0)),Constant(-2.0))
Mad(Add(Constant(-0.01),Mul(Var($high,20),Constant(2.0))),30)
WMA(Div(Add(Constant(0.5),$vwap),$low),20)
Var(Mul(Log(Mean(Mul(Greater(Greater(Med($volume,30),Constant(0.5)),$vwap),$volume),10)),Constant(2.0)),30)
Log(Add(Constant(10.0),$close))
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/18432_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.174       |
|    eval_cnt             | 148         |
|    significant          | 80          |
|    size                 | 148         |
| rollout/                |             |
|    ep_len_mean          | 14.1        |
|    ep_rew_mean          | -0.393      |
| test/                   |             |
|    ic                   | 0.0802      |
|    rank_ic              | 0.0704      |
| time/                   |             |
|    fps                  | 18          |
|    iterations           | 9           |
|    time_elapsed         | 1015        |
|    total_timesteps      | 18432       |
| train/                  |             |
|    approx_kl            | 0.011701187 |
|    clip_fraction        | 0.175       |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.85       |
|    explained_variance   | 1.79e-07    |
|    learning_rate        | 0.001       |
|    loss                 | -0.255      |
|    n_updates            | 80          |
|    policy_gradient_loss | -0.0261     |
|    value_loss           | 0.152       |
-----------------------------------------
EMA(Add(Med($high,30),Std($volume,30)),10)
Sub(EMA(Std($close,50),30),Constant(-1.0))
$vwap
Sum(Mul(Sub(Constant(-1.0),$close),Constant(5.0)),20)
Log(Ref(Div(Add(Mul(Constant(0.5),$volume),Ref($volume,50)),Constant(0.5)),30))
Abs(Add(EMA(Var(Med(Mean(Mul(Greater(Constant(-30.0),Sub($low,Constant(-0.01))),$vwap),40),30),40),20),$low))
Add(Add(Add(Std(Min(Mul(Sub(Constant(-0.5),Med($vwap,20)),Constant(-0.01)),10),30),Constant(30.0)),Constant(0.5)),Var($close,10))
Abs(Add(Mul(Mul(Mean(Add($low,Constant(-10.0)),30),Constant(-5.0)),Constant(-0.01)),Constant(-0.01)))
Mean(Mul(Constant(-1.0),$high),20)
Std(Add($close,Constant(2.0)),30)
Var($low,30)
Sub(Constant(-30.0),Mul(Sub($low,Constant(-5.0)),Constant(30.0)))
WMA(Add(Add(Sub(Constant(0.01),$open),Constant(-1.0)),Constant(-10.0)),10)
Mad(WMA(Sub(Less(Add(Log(Div(Constant(-1.0),$low)),Constant(2.0)),Constant(1.0)),$low),50),50)
Sub(Sub(Div($volume,Div(Less($close,Constant(10.0)),$volume)),$close),Constant(-0.01))
Add(Constant(-30.0),$vwap)
WMA($open,20)
$low
Log(Add($vwap,Constant(0.01)))
Std(Sum(Mul(Constant(5.0),Add(Greater(Div($close,Mul($open,Constant(30.0))),Add(Sub($close,$vwap),Constant(1.0))),Constant(-0.5))),20),10)
Abs(Mul(Add(Constant(5.0),Med($low,40)),Mul($vwap,$high)))
Div(Mean(Sub(Var(Sum(Add(Constant(-0.5),Add($vwap,Constant(30.0))),30),50),$volume),40),Constant(2.0))
EMA(Mean(Log(Mul(Add(Constant(-10.0),$volume),Constant(-5.0))),20),10)
Mul(Constant(-5.0),$low)
Med(Add(Sub(Constant(-5.0),$high),Constant(0.5)),40)
Mul(Std($low,10),Constant(-0.5))
Mul(Ref(Mul(Add(Sub(Constant(-30.0),$low),Sum(Sub(Mul($low,$open),Constant(-10.0)),30)),$volume),10),Constant(2.0))
Less($open,$high)
Med(Mul(Constant(-0.01),$open),40)
Sub(Mul(EMA(Log(Sub(Mul(Div(Log(Div(Constant(5.0),Add($high,Constant(-2.0)))),Constant(5.0)),$close),Constant(-5.0))),30),$close),Constant(0.01))
Add(Greater(Mul(Constant(-2.0),$volume),Constant(-0.01)),$vwap)
$close
Add(Max(Mul(Constant(-1.0),$volume),10),Constant(30.0))
Var(Div(Greater($volume,Constant(0.5)),$low),20)
Add(Sub(Add(Add(Greater(Add(Add($volume,$low),Constant(0.5)),Constant(-1.0)),Add(Mul($vwap,Constant(-10.0)),Constant(-0.01))),$high),Constant(-30.0)),Constant(-5.0))
Mul(Mul($low,Constant(-0.01)),Constant(0.01))
Mul(Add(Constant(0.01),$low),Constant(30.0))
Div(Mul(Constant(-0.01),WMA($high,20)),Constant(0.5))
Div(Max(Sub($open,Sub(Mul(Div($volume,Constant(-1.0)),Constant(-0.5)),Constant(0.5))),20),Constant(-2.0))
Mul(Sub(Mul(Abs(Var(Sub(Add(Var($open,30),Mul(Constant(-1.0),$vwap)),Constant(-5.0)),40)),Constant(-1.0)),Constant(30.0)),Constant(2.0))
Mul(Med(Sum(Sub(Std(Sub(Div(Constant(2.0),$volume),Div($open,$low)),10),$open),50),20),Constant(0.01))
Greater(Div(Log(Ref($vwap,40)),Constant(-2.0)),Add($open,$vwap))
Mul(Add(Constant(0.5),Mul(Add($volume,$vwap),$vwap)),Constant(-0.5))
$close
Std(Mul(Constant(-1.0),Abs($vwap)),30)
Add(Constant(2.0),$low)
Sub($close,Constant(2.0))
Corr(Sub(Constant(-1.0),Div(Max($volume,30),$vwap)),$vwap,30)
Mul(Constant(-30.0),$vwap)
Add(Constant(1.0),Mul($close,Mul($volume,Constant(-5.0))))
Add(Sub(Mad(Div(Delta(Mul(Greater(Ref($close,30),Constant(5.0)),$vwap),40),Constant(-30.0)),10),$low),$low)
Mul(Div(Min(Mul(Constant(-0.01),$high),30),Constant(-2.0)),Constant(10.0))
Sub(Add(Constant(1.0),Sub(Mul(Greater(Mul(Log(Abs(Sub($high,Sub($high,$high)))),$close),Constant(0.5)),$high),$volume)),$open)
$volume
Var(Ref(Var(Max(Div(Constant(-2.0),Mad($high,10)),20),40),30),40)
$open
$volume
$vwap
$high
Abs(Div($vwap,Constant(-30.0)))
Log($volume)
Less(Med(Sub(Constant(-1.0),$low),20),$volume)
Less(Div(Med(Sub(Greater(Add($open,$low),Constant(1.0)),Add($close,$low)),40),Add($low,Constant(2.0))),Add($open,Constant(-5.0)))
Add(Mul(Sub(Add($open,Mul(Greater($vwap,Constant(5.0)),$volume)),Constant(0.5)),Constant(0.5)),Sub(Sub(Mul($vwap,$low),$close),Constant(-5.0)))
Log(Mean(Abs(Greater($open,Add(Constant(1.0),$volume))),40))
Mul(Constant(-1.0),$volume)
$high
Div(Sum(EMA(Med(Mul(Add(Mul(Sub(Constant(-0.01),$close),Constant(5.0)),Constant(-1.0)),Constant(-10.0)),30),10),10),Mul(Constant(-0.01),$vwap))
Min(Div(Greater(Sub(Constant(1.0),$volume),Constant(-30.0)),Greater(Add(Med($close,10),Sub($high,Add($vwap,Constant(-5.0)))),$volume)),20)
Div(Div(Constant(5.0),$close),Constant(-30.0))
Sub(Delta(Div(Less(Constant(-5.0),Mul($low,Std(Mul(Mul(Add(Constant(0.01),$high),Constant(5.0)),Constant(-0.01)),20))),$vwap),50),Constant(-10.0))
Div(Sub(Constant(-5.0),$low),$volume)
Add(Mean(Mul(Add(Greater($open,$high),Constant(-5.0)),Constant(-2.0)),30),Sub(Greater(Add($open,Constant(-5.0)),Add(Constant(-0.5),$high)),Constant(-5.0)))
Abs(Sub(Log(Add(Constant(-0.01),$close)),Constant(-2.0)))
Div(Constant(-0.01),Add($high,$open))
Abs(Mul(Greater(Constant(0.01),$volume),$low))
Sum(Mul(Sum(Ref(Sub(Constant(-2.0),$volume),10),30),Constant(-0.5)),30)
Div($open,Constant(-1.0))
Mul(Less(Sub($volume,Mul(Greater($volume,Constant(0.01)),$close)),Constant(-30.0)),Med($vwap,50))
Div(Add(Var(Sub(Greater(Constant(-5.0),Sub($low,Constant(-0.01))),$close),30),$volume),Sub(Add(Mul(Constant(-5.0),$low),Constant(-0.01)),Constant(5.0)))
Div(Mul(Abs($volume),$open),Add(Mul(Sub(Add(Constant(-30.0),$high),Constant(5.0)),Constant(-30.0)),$low))
Sum(Add(Add(Med(Max(Div(Constant(0.01),$volume),10),30),$low),Ref($close,30)),20)
Add(Add(Mul(Constant(-0.5),$close),Constant(0.01)),Less(Add(Less($high,Sub(Mul(Add($high,$low),Constant(0.01)),Constant(-5.0))),Constant(-0.5)),Constant(-10.0)))
$low
Add($vwap,Sub(EMA(Add(Mul($high,$low),Abs($volume)),50),$vwap))
Log(Mul(Constant(-2.0),$volume))
Sub(Mul(Less(Constant(-2.0),Mul($close,Constant(5.0))),Abs($close)),Constant(-0.01))
Mul(Add(Constant(0.01),Div($close,Greater(Constant(-1.0),Std($volume,50)))),Constant(-1.0))
Sub(Add(Less($close,Constant(-0.5)),Log(Abs($volume))),Log($low))
Add(Constant(-0.01),$high)
Add(Sub(EMA(Med(Med(Sum(Add(Constant(30.0),Std($high,40)),20),20),30),10),Add($open,Constant(-30.0))),Constant(10.0))
$open
Sub(Mul(Constant(2.0),$high),Constant(0.01))
Mul(Constant(2.0),$high)
Mul($low,$low)
Add(Constant(2.0),Sub($high,$vwap))
Mul(Constant(30.0),$vwap)
$close
Div(Constant(-2.0),Add($close,Constant(2.0)))
Abs(Std(Log(Sub(Mad(Mul(Constant(5.0),Div(Add(Mul($close,$low),Less(Constant(5.0),$close)),Constant(0.01))),20),Constant(0.5))),20))
Mul(Greater(Abs(Mul(Constant(-5.0),$volume)),Add(Less(Constant(5.0),$volume),$low)),Constant(10.0))
Log(Add(Mul(Mul(Sub(Greater(Add(Constant(-10.0),Add($vwap,Constant(-5.0))),Constant(2.0)),$vwap),Var($high,50)),Constant(2.0)),Log($close)))
Sub(Add(Constant(2.0),Sub(Add($open,Constant(-30.0)),Constant(-0.01))),$open)
Var(Sub(Less(Constant(-1.0),Mul(Less(Min($low,30),Constant(-2.0)),Sub(Delta($high,30),Constant(0.01)))),$vwap),40)
Div(Div(Constant(30.0),$low),Constant(-10.0))
Mad(Div(Constant(-10.0),$open),40)
$close
Mul(Less(Constant(-30.0),Sub($high,Constant(-30.0))),Add($vwap,Constant(2.0)))
Sub(Mean(Mul(Sub(Add(Add(Div(Constant(-0.5),$low),$open),Constant(-0.5)),$vwap),Mul($high,Constant(30.0))),20),Constant(5.0))
Abs(Sub(Div(Mul(Add(Constant(-30.0),Log(Div($high,Min(Div(Constant(0.5),$vwap),50)))),Constant(-0.5)),Constant(-2.0)),$vwap))
Cov(WMA(Sub(Abs($vwap),Constant(-5.0)),30),Mul(Sub(Var($close,30),Constant(-10.0)),Constant(-30.0)),30)
Min(Sub($open,Constant(-0.5)),10)
Mul(Add(Constant(-5.0),Min($close,40)),Less(Constant(-0.01),Ref($vwap,40)))
Sub(Mul(Less(Constant(-0.5),Div($open,Constant(2.0))),$open),Greater(Greater(Constant(-2.0),$close),$high))
$close
Sub(Mul(Mul(Greater(Constant(-2.0),Less($open,Std(Add(Constant(-0.01),$volume),40))),EMA($low,20)),Less(Constant(-1.0),$open)),Constant(-0.5))
Div(Abs(WMA(Sum(Div(Sub(Constant(-5.0),EMA(Div(Mean(Abs($volume),50),$low),10)),Constant(2.0)),10),20)),$high)
Sub(Sub(Less(Mul(Sub(Mul(Constant(30.0),Mul($close,Constant(-10.0))),$vwap),Constant(2.0)),Constant(-1.0)),Div(Add($volume,Constant(-5.0)),Constant(2.0))),Constant(-0.01))
WMA(Sub(Less(Constant(2.0),$low),$low),40)
Mul(EMA(Med(Div(Sub(Add(Constant(-0.01),$low),Constant(-1.0)),Constant(2.0)),30),20),$high)
Less(Sub(Div(Constant(-30.0),$high),Sub(Greater(Constant(5.0),$high),Mul($vwap,Constant(-30.0)))),Log(Sub(Constant(-1.0),$close)))
$high
Cov(Sub(Constant(-0.5),$vwap),Sub($low,Constant(-30.0)),40)
Add(Mul(Med(Sub(Add(Var(Mul(Constant(-0.5),Greater($close,$volume)),30),Med($low,20)),$vwap),20),Constant(2.0)),Constant(5.0))
Sub(Delta(Less(Min($low,10),Mean($volume,30)),20),Constant(-30.0))
Min(Mul(Greater(Var(Sub(Mul(Div($open,Constant(10.0)),Constant(10.0)),Constant(5.0)),30),Constant(0.5)),Sub(Add($volume,Constant(-0.01)),Constant(-30.0))),40)
Add(Add(Constant(2.0),$high),Mul($volume,$volume))
Div(Sub(Add(Div(Div(Greater(Add($open,$vwap),Constant(0.5)),$low),Constant(-0.5)),Constant(30.0)),$high),Constant(10.0))
Mean(Med(Less(Add($low,Add(Constant(1.0),$high)),Add(Sub($volume,Constant(5.0)),Mad(Sub(Constant(2.0),$volume),30))),50),10)
$close
Sum(Mul(Med(Mul(Constant(-10.0),$low),10),Constant(-2.0)),20)
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/20480_steps
------------------------------------------
| pool/                   |              |
|    best_ic_ret          | 0.179        |
|    eval_cnt             | 204          |
|    significant          | 121          |
|    size                 | 200          |
| rollout/                |              |
|    ep_len_mean          | 12.7         |
|    ep_rew_mean          | -0.16        |
| test/                   |              |
|    ic                   | 0.084        |
|    rank_ic              | 0.0726       |
| time/                   |              |
|    fps                  | 12           |
|    iterations           | 10           |
|    time_elapsed         | 1661         |
|    total_timesteps      | 20480        |
| train/                  |              |
|    approx_kl            | 0.0109213665 |
|    clip_fraction        | 0.161        |
|    clip_range           | 0.2          |
|    entropy_loss         | -2.79        |
|    explained_variance   | 1.19e-07     |
|    learning_rate        | 0.001        |
|    loss                 | -0.226       |
|    n_updates            | 90           |
|    policy_gradient_loss | -0.0285      |
|    value_loss           | 0.168        |
------------------------------------------
Add(Constant(-0.01),Mean(Mul(Mean(Sub(Less(EMA($high,50),Add($low,Constant(-2.0))),$close),20),Less($open,Constant(0.01))),20))
Add(Greater(Constant(0.01),$low),$volume)
Add(Constant(-0.01),$volume)
Sum(Less(Sub(Constant(5.0),Add(Mul($vwap,Constant(2.0)),Constant(0.01))),$vwap),20)
Sub(Div(Mean(Add(Sub(Div(Constant(-1.0),Sub($open,Add($high,Less(Constant(-5.0),$volume)))),Constant(1.0)),$high),10),Constant(1.0)),Constant(-5.0))
Mean(Log(Delta(Div(EMA(Var(WMA($close,10),20),40),Constant(-2.0)),50)),20)
Mul(Less(Constant(10.0),Add($close,Var($open,10))),$low)
Div(Div(Log(Sub($close,Constant(1.0))),$high),$vwap)
Log(Sub(Add($volume,Constant(-30.0)),Constant(0.01)))
Log(Abs(WMA(Add(Log(Var(Mul(Greater(Constant(5.0),$close),$vwap),30)),$open),20)))
$low
Med(Log(Add(Div(Constant(0.5),$low),Constant(-10.0))),30)
Sub(Div(Div(Constant(-0.5),$vwap),$vwap),Sum($close,30))
EMA(Add(Sub(Constant(2.0),Delta($open,50)),Mul(Constant(5.0),$volume)),50)
Div(Mul(Add(Constant(0.01),$open),Greater($high,Constant(2.0))),Constant(5.0))
$open
Sub(Constant(5.0),Abs(Mean($close,20)))
Div(Add(Sub(Constant(5.0),Div($low,Add($close,Mul(Mul(EMA(Mul($volume,Constant(2.0)),30),Constant(10.0)),Constant(2.0))))),Constant(5.0)),Constant(-10.0))
Mean(Div(Constant(-5.0),Corr(Add($vwap,$vwap),$volume,40)),20)
Sub(Abs(Div(Constant(2.0),Med($high,20))),Constant(-5.0))
Add(Constant(-0.01),Add($vwap,$volume))
Mul(Constant(-2.0),$open)
Add(Sub(Constant(10.0),Mul(Abs(Sub($open,Less($close,$volume))),Constant(-30.0))),Constant(-2.0))
Abs(Mean(Mul(Mean(Sub(Sub(Constant(-2.0),Min(Med($volume,30),30)),Constant(-5.0)),20),Constant(-5.0)),30))
Var(Div(Greater(Constant(1.0),Abs($low)),$close),10)
Add(Add(Mul(Div(Max(Div(Constant(0.01),$vwap),30),$close),$low),Constant(-0.01)),$volume)
$low
Max(Sub(Constant(-0.5),$vwap),40)
Div(Constant(-0.01),$low)
Sub(Constant(-2.0),Add(Greater($volume,Constant(5.0)),$high))
Mul(Sub(Med(Var($close,30),40),Constant(-10.0)),Constant(30.0))
Mul(Add(Mul($close,$open),$volume),Sub($high,Constant(-2.0)))
Mean(Mad(Add(Sub(Var(Greater(Sub(Constant(5.0),$close),$close),20),Div(Constant(-0.5),Add($high,Constant(5.0)))),$volume),30),30)
Div(Constant(-1.0),$vwap)
Sub(Constant(0.5),$low)
Log(Mul($low,$low))
Mul(Med(Add(Med(Add(Constant(1.0),Add(Mul(Add($vwap,Mad($vwap,30)),Constant(-2.0)),Constant(-30.0))),30),$close),20),Constant(-5.0))
$low
Add(Constant(2.0),$close)
Div(Mul(Add(Less(Sub(Constant(2.0),Mad($high,40)),Constant(0.01)),Mean($low,30)),Constant(-10.0)),$low)
Mul(Sub(Sub(Greater(Add(WMA(Sub(Mul(Constant(-1.0),$high),Constant(0.5)),10),Constant(-5.0)),Constant(-0.01)),$vwap),$vwap),Mul($open,Constant(2.0)))
Add(Add(Div(Constant(10.0),$vwap),Log($vwap)),Constant(0.01))
$low
Var(Add(Less(Add(Constant(-30.0),$close),Constant(0.5)),$volume),30)
$high
Add(Constant(-30.0),Sub($vwap,$low))
Sum(Sub(Abs(Mean(Mul(Div(Add(Abs(Sub(Constant(5.0),$volume)),Constant(-0.5)),Constant(-30.0)),Constant(-30.0)),10)),Add(Constant(2.0),$volume)),30)
$open
Mul(Mul(EMA(Sub($vwap,Constant(-5.0)),10),$volume),Constant(-0.01))
Add(Greater(Div(Mul(Mul(Delta(Sub(Constant(-10.0),Mul($volume,Constant(-10.0))),20),$high),Constant(1.0)),Constant(-5.0)),Less($high,Constant(-0.01))),$low)
$high
$volume
Add(Constant(0.5),Std(Mad($high,10),30))
Var(Ref($open,30),20)
Mul(Constant(-2.0),Cov($vwap,$high,30))
Mul(Ref(Add(Std(Delta(Add(Less(Greater(Mul(Constant(0.01),$low),Constant(2.0)),$high),$vwap),20),10),Constant(-1.0)),40),Constant(-30.0))
$vwap
Add(Var(Add(Constant(-2.0),Log(Delta(Mad(Add(Abs($low),Constant(-30.0)),20),30))),50),Constant(2.0))
Sub(Abs(Sub(Mul($vwap,Constant(-2.0)),Constant(-0.01))),$volume)
Mul(Mean(Sub(Add(Max(Corr(Mul(Constant(5.0),Sub(Log($low),$low)),$low,30),20),Constant(-5.0)),Constant(-10.0)),30),Constant(-1.0))
Mul(Constant(-1.0),$vwap)
Less($close,Add($high,Add($volume,Constant(2.0))))
Var(Add(Constant(-5.0),Add($open,Constant(0.5))),30)
Add(Greater(Less(Sum(Div(Constant(-0.01),$low),50),Add(Constant(-30.0),$low)),Constant(30.0)),Std($volume,20))
Sub(Div(Constant(0.01),$open),Add(Add($close,$high),Constant(-30.0)))
Var($vwap,20)
Var(Add($close,Constant(-5.0)),10)
Sub(Sub(Greater(Add(Constant(-10.0),$volume),Constant(0.01)),$vwap),Constant(1.0))
Log(Mul(Log(Div(Constant(-1.0),Add(Sub($open,Mul($open,Constant(5.0))),Constant(0.5)))),Constant(-1.0)))
Log(Min($close,40))
Div(Constant(10.0),$volume)
Sub(Less(Less(Greater(EMA(Div(Constant(-30.0),Mad($volume,40)),50),Constant(5.0)),$vwap),$volume),$volume)
Cov(Add(Div(EMA(Add(Less(Greater(Constant(-1.0),$vwap),Ref($high,20)),$volume),40),Constant(0.01)),$high),$close,20)
Div(Greater(Constant(-10.0),$vwap),$vwap)
Sub(Greater(Add($open,$vwap),$close),$low)
Mean(Ref(Mul(Delta(Sub(Div(Greater(Constant(-1.0),$close),Mul($open,Constant(-5.0))),Constant(1.0)),50),Constant(1.0)),20),10)
Sub(Constant(-1.0),Greater($close,$low))
$close
$low
Sub(Add(Sub(Add($low,$vwap),Constant(-30.0)),Constant(-0.01)),Constant(0.5))
Abs(Med(Sub(Mul(Mul($vwap,Constant(-10.0)),Less(Constant(1.0),$open)),$close),20))
$close
Add(Constant(-10.0),Mul(Less($close,$low),Constant(0.01)))
Sub(Log(Add(Constant(2.0),Delta($vwap,20))),$high)
Add(Mul(Constant(0.5),Mul(Add($low,Mul(Constant(1.0),Div(Greater($low,Constant(10.0)),Mean(Add($close,$open),30)))),$vwap)),Constant(0.01))
Log(Mul(Less(Constant(-30.0),Var(Sub(Div($volume,Constant(0.01)),Constant(-1.0)),40)),$volume))
Add($low,Constant(30.0))
EMA(Div(Constant(10.0),Mul($high,Sub(Mul(Constant(-1.0),$vwap),$high))),20)
Add(Mean(Ref(Add(Constant(-5.0),$vwap),50),20),Constant(2.0))
Less(Add(Med(Abs(Add(Constant(2.0),$volume)),40),$vwap),$open)
Sub(Add(Add(Constant(0.01),Mul(Add($close,$close),Constant(-1.0))),Constant(-1.0)),Constant(-1.0))
Sub(Greater(Add(Std(Max(Mul(Less(Constant(-0.5),$volume),$open),40),40),Sub($volume,Div($close,Constant(-30.0)))),Constant(0.5)),$volume)
Mul(Constant(0.01),Add($low,Constant(2.0)))
Add(Log(Add(Mul(Mul(Greater(Sub($vwap,$high),Constant(-0.01)),Log(WMA(Min($high,10),10))),$open),Constant(-2.0))),Constant(2.0))
Add(Add(Greater(Delta(Mul(Mean($low,10),Add($vwap,Constant(-10.0))),20),Constant(10.0)),EMA($open,50)),Delta($low,30))
Ref(Add(Constant(-2.0),$vwap),40)
Div(Sub(Constant(0.5),Mean(Med($high,50),40)),Constant(2.0))
Sub(Constant(2.0),Sub(Mul(Div(Med(Min($open,30),30),Constant(-10.0)),$high),$volume))
Add(Mul(Less(Constant(-5.0),Add(Mean($high,10),Constant(-30.0))),Mean(Mul(Sub(Med($close,10),Constant(-0.01)),Constant(-5.0)),10)),Constant(-30.0))
Ref($vwap,20)
Div(Sub(Ref(Sub(Med(Sub(Med(Add(Constant(0.01),$low),20),Constant(-2.0)),50),Constant(-1.0)),40),Constant(1.0)),Constant(-0.01))
Add(Mul(Sub(Ref(Var(Min(Div(Constant(30.0),$close),10),30),50),Constant(-0.01)),Constant(5.0)),$open)
Min(Add(Div(Less(Constant(-1.0),$close),Div($open,Less(Constant(-1.0),Mul(Sub($close,Constant(-30.0)),Constant(-0.5))))),Add($close,Constant(-0.01))),40)
Add(Div(Add(Constant(1.0),Mean(Mean($high,20),20)),Constant(-5.0)),Constant(2.0))
$high
Mul($vwap,$high)
Sub(Constant(-0.5),$vwap)
Add($close,Mad(Div($close,Div(Sub($vwap,$high),Constant(-5.0))),50))
Sub(Greater(Greater(Less($volume,Constant(0.01)),Var(Delta($close,30),40)),$close),$vwap)
Corr(WMA($close,10),$close,50)
$vwap
Greater($open,Med($close,50))
Add(Constant(1.0),$low)
Mul(Add(Constant(2.0),Div(Add($high,Mul(Constant(-1.0),Mean($volume,30))),Constant(-30.0))),Constant(0.01))
$volume
Add($high,Constant(-1.0))
Mul(Constant(-2.0),$high)
Var(Abs(Add(Constant(5.0),$vwap)),30)
Mul(Constant(-30.0),$vwap)
Add(Constant(-30.0),$close)
Sub(Less(Constant(2.0),$high),$high)
WMA(Sub(Div(Constant(30.0),Abs(Greater($vwap,Mul(Sub(Constant(0.01),$high),Constant(10.0))))),Constant(1.0)),30)
Mul(Add(Less(Constant(0.01),Abs($low)),$high),$open)
Sub(Med($high,30),Constant(-1.0))
Mul(Constant(10.0),$close)
Log(Sub(Div(Mul(Less(Add(Mul(Constant(-0.01),$volume),Constant(2.0)),Constant(-2.0)),$close),Constant(-0.01)),$vwap))
Mad(Div(Mul(WMA(Mul(Sub(Div(Less(Sub(Constant(-30.0),$close),Constant(5.0)),$open),$vwap),Constant(1.0)),20),Constant(1.0)),Constant(-30.0)),50)
Sub(Constant(1.0),Mul($vwap,Constant(2.0)))
Add(Constant(-1.0),$high)
$high
Std(Div(Less(WMA(Med(Div(Constant(5.0),Max($close,20)),50),30),Constant(1.0)),$volume),40)
Mul(Add(Add(Less(Constant(5.0),Sub($vwap,Constant(-5.0))),$volume),Constant(-2.0)),Ref(Add($vwap,Constant(1.0)),20))
Mul(Add(Add(Add(Sub(Log($low),Constant(5.0)),Greater(Constant(0.5),$high)),Constant(-5.0)),Log($low)),Constant(-5.0))
Sub(Constant(-1.0),EMA($volume,30))
Sub(Constant(-30.0),$close)
Sub(Constant(0.5),$close)
$high
Log(Max(Add($vwap,Constant(0.5)),30))
Div(Sub(Mad(Mul(Constant(-5.0),Add(Add(Mul($volume,Less(Mul($vwap,$volume),Constant(-0.01))),Constant(2.0)),Constant(-5.0))),40),Constant(5.0)),$volume)
Add(Sub(Add($open,Constant(-5.0)),Constant(30.0)),Constant(-5.0))
Add(Mul(Log(Mul(Mul(Sub($vwap,Add(Constant(5.0),Mul(Mean($vwap,10),Constant(0.5)))),Constant(0.01)),$open)),$high),Constant(0.01))
$vwap
Less(Abs(Sub(Constant(-5.0),EMA(Add($volume,Constant(-30.0)),10))),$vwap)
$vwap
$vwap
$close
Add(Div(Constant(-10.0),Sub(Div(Sub(WMA($close,10),$high),Log(Log($volume))),$low)),Mean($close,20))
Sub(Greater(Min(Add(Sub(Add(Constant(1.0),Sub($close,$high)),Constant(-1.0)),Constant(-5.0)),40),Constant(-1.0)),$high)
Mean(Sub(Add(Div(Med(Div(Sub(Sub(Constant(10.0),$volume),Constant(-5.0)),$high),10),Constant(1.0)),Constant(-0.5)),Constant(-0.5)),50)
Delta(Mul(Constant(-1.0),Mean(Max($open,30),30)),20)
Mul(Constant(2.0),$high)
$close
Div(Constant(-0.5),$low)
Sub(Var(Add(Mul(Constant(-0.01),Mean(Sub($vwap,Constant(-1.0)),30)),Constant(-10.0)),20),Constant(1.0))
Var(Sub(Constant(-10.0),Greater($close,Mul($volume,Constant(-5.0)))),20)
Add(Mul(Greater(Mad(Sub(Constant(-30.0),$high),20),Constant(-30.0)),$vwap),Constant(2.0))
Saving model checkpoint to /Users/yangguangyu/Projects/QuantLearning/research/test_result/alphagen/new_hs300_200_5_20240105084852/22528_steps
-----------------------------------------
| pool/                   |             |
|    best_ic_ret          | 0.193       |
|    eval_cnt             | 269         |
|    significant          | 131         |
|    size                 | 200         |
| rollout/                |             |
|    ep_len_mean          | 10.8        |
|    ep_rew_mean          | -0.0587     |
| test/                   |             |
|    ic                   | 0.0853      |
|    rank_ic              | 0.0758      |
| time/                   |             |
|    fps                  | 9           |
|    iterations           | 11          |
|    time_elapsed         | 2459        |
|    total_timesteps      | 22528       |
| train/                  |             |
|    approx_kl            | 0.013472797 |
|    clip_fraction        | 0.185       |
|    clip_range           | 0.2         |
|    entropy_loss         | -2.72       |
|    explained_variance   | 2.38e-07    |
|    learning_rate        | 0.001       |
|    loss                 | -0.224      |
|    n_updates            | 100         |
|    policy_gradient_loss | -0.0275     |
|    value_loss           | 0.144       |
-----------------------------------------
